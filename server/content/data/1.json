{
  "imageSets": {
    "Divorcing Microservices With Rascal": {
      "id": "Divorcing Microservices With Rascal",
      "thumbnail": {
        "url": "//images.contentful.com/g99n9a78vx0s/1qT8990i1SqsACkwECicAI/ed05fc680b9409d92d0ebc46ca2b274a/divorcing-microservices-with-rascal-720x540.jpg",
        "title": "Thumbnail of Microservices With Rascal",
        "description": "A picture of a heart, ripped in two"
      }
    },
    "Yadda - The Other BDD Library": {
      "id": "Yadda - The Other BDD Library",
      "thumbnail": {
        "url": "//images.contentful.com/g99n9a78vx0s/3ipHCk26VGWG8YQiiy4kss/fd1988b7d5aa41f645b96fc9082fad07/yadda-720x540.jpg",
        "title": "Thumbnail of Yadda - The Other BDD Library",
        "description": "Man sitting among boxes labelled chai, jasmine, mocha, vows and cucumber"
      }
    },
    "Orange Is Not The New Black": {
      "id": "Orange Is Not The New Black",
      "thumbnail": {
        "url": "//images.contentful.com/g99n9a78vx0s/4J3pfkFcTYQq8giGaCwSC8/7953f2c1dd967032cab1aa26b1c91bd3/orange-is-the-new-black-720x540.jpg",
        "title": "Thumbnail of Orange Is Not The New Black",
        "description": "Orange Is Not The New Black "
      }
    },
    "Await - I'll See You In Hell": {
      "id": "Await - I'll See You In Hell",
      "thumbnail": {
        "url": "//images.contentful.com/g99n9a78vx0s/Ayv9uj9UyWu6oOge8sYMo/0468e8bccf21a0062f02d2826ed1c43e/pinhead-720x540.jpg",
        "title": "Thubmnail of Pinhead",
        "description": "Pinhead from the Hellraiser franchise"
      }
    },
    "10½ Factor Microservices With Node.js": {
      "id": "10½ Factor Microservices With Node.js",
      "thumbnail": {
        "url": "//images.contentful.com/g99n9a78vx0s/3aMxdRlFxuggOWEqeIYm6i/53409a51c6e8a38616576e3cbae97b9f/ten-and-a-half-factor-720x540.jpg",
        "title": "Thumbnail of a 12 Sided  Dice",
        "description": "A 12 sided dice showing 10½"
      }
    },
    "Enterprise Grade Microservices": {
      "id": "Enterprise Grade Microservices",
      "thumbnail": {
        "url": "//images.contentful.com/g99n9a78vx0s/3rAYG3rbaEI6Ka4SwigAuA/a0c40e3e2e6113fcdbf3323775f35665/enterprise-grade-microservices-720x540.jpg",
        "title": "Thumbnail of Enterprise Grade Microservices",
        "description": "Businessman standing by a window in a skyscraper"
      }
    }
  },
  "links": {
    "Twitter": {
      "id": "Twitter",
      "icon": "fa-twitter",
      "url": "https://www.twitter.com/cressie176"
    },
    "Mobile": {
      "id": "Mobile",
      "text": "+44 (0)7814033321",
      "icon": "fa-phone",
      "url": "tel:+447814033321"
    },
    "Duty Calls": {
      "id": "Duty Calls",
      "text": "Duty Calls - xkcd",
      "url": "https://xkcd.com/386/"
    },
    "Linkedin": {
      "id": "Linkedin",
      "icon": "fa-linkedin",
      "url": "https://www.linkedin.com/in/stephencresswell/"
    },
    "See all software…": {
      "id": "See all software…",
      "text": "See all software…",
      "url": "/software"
    },
    "Home": {
      "id": "Home",
      "text": "Home",
      "icon": "fa-home",
      "url": "/"
    },
    "Terms & Conditions": {
      "id": "Terms & Conditions",
      "text": "Terms & Conditions",
      "url": "/legal/terms-and-conditions"
    },
    "See all talks…": {
      "id": "See all talks…",
      "text": "See all talks…",
      "url": "/talks"
    },
    "Node.js Meetup - Divorcing Microservices With Rascal": {
      "id": "Node.js Meetup - Divorcing Microservices With Rascal",
      "text": "Node.js Meetup",
      "url": "https://www.meetup.com/Node-js-Meetup-London/events/231560165/"
    },
    "Privacy Policy": {
      "id": "Privacy Policy",
      "text": "Privacy Policy",
      "url": "/legal/privacy-policy"
    },
    "GitHub": {
      "id": "GitHub",
      "icon": "fa-github",
      "url": "https://www.github.com/cressie176/"
    },
    "Talks": {
      "id": "Talks",
      "text": "Talks",
      "icon": "fa-microphone",
      "url": "/talks"
    },
    "See all articles…": {
      "id": "See all articles…",
      "text": "See all articles…",
      "url": "/blog"
    },
    "Corp.js - Enterprise Grade Microservices": {
      "id": "Corp.js - Enterprise Grade Microservices",
      "text": "Corp.js",
      "url": "https://www.meetup.com/Corporate-JavaScript-Meetup-Budapest/"
    },
    "Father Ted - Channel 4": {
      "id": "Father Ted - Channel 4",
      "text": "Father Ted - Channel 4",
      "url": "http://www.channel4.com/programmes/father-ted"
    },
    "Blog": {
      "id": "Blog",
      "text": "Blog",
      "icon": "fa-file-text-o",
      "url": "/blog"
    },
    "Email": {
      "id": "Email",
      "text": "hello@stephen-cresswell.net",
      "icon": "fa-envelope",
      "url": "mailto:hello@stephen-cresswell.net"
    },
    "Community For Agile Testing - Yadda": {
      "id": "Community For Agile Testing - Yadda",
      "text": "Community For Agile Testing",
      "url": "https://www.meetup.com/es-ES/Community-for-Agile-Testing/events/229788565/"
    }
  },
  "pages": {
    "blog": {
      "id": "blog",
      "title": "Blog",
      "link": {
        "id": "Blog",
        "text": "Blog",
        "icon": "fa-file-text-o",
        "url": "/blog"
      },
      "introImage": {
        "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
        "title": "Duty Calls",
        "description": "A stick figure refusing to leave his computer and come to bed"
      },
      "introText": "\"Someone is wrong on the internet\"",
      "introLink": {
        "id": "Duty Calls",
        "text": "Duty Calls - xkcd",
        "url": "https://xkcd.com/386/"
      }
    },
    "privacy-policy": {
      "id": "privacy-policy",
      "title": "Privacy Policy",
      "body": "<p>This privacy policy sets out how we use and protect any information that you give us when you use this website.</p>\n\n<p>We are committed to ensuring that your privacy is protected. Should we ask you to provide certain information by which you can be identified when using this website, then you can be assured that it will only be used in accordance with this privacy statement.</p>\n\n<p>We may change this policy from time to time by updating this page. You should check this page from time to time to ensure that you are happy with any changes. This policy is effective from 1st August 2017.</p>\n\n<h3>What we collect</h3>\n<p>This website does not ask for or collect personal information.</p>\n\n<h3>How we use cookies</h3>\n<p>A cookie is a small file which asks permission to be placed on your computer&apos;s hard drive. Once you agree, the file is added and the cookie helps analyse web traffic or lets you know when you visit a particular site. Cookies allow web applications to respond to you as an individual. The web application can tailor its operations to your needs, likes and dislikes by gathering and remembering information about your preferences.</p>\n\n<p>We use traffic log cookies to identify which pages are being used. This helps us analyse data about webpage traffic and improve our website in order to tailor it to customer needs. We only use this information for statistical analysis purposes and then the data is removed from the system.</p>\n\n<p>Overall, cookies help us provide you with a better website by enabling us to monitor which pages you find useful and which you do not. A cookie in no way gives us access to your computer or any information about you, other than the data you choose to share with us.</p>\n\n<p>You can choose to accept or decline cookies. Most web browsers automatically accept cookies, but you can usually modify your browser setting to decline cookies if you prefer. This may prevent you from taking full advantage of the website.</p>\n\n<h3>Links to other websites</h3>\n\n<p>Our website may contain links to other websites of interest. However, once you have used these links to leave our site, you should note that we do not have any control over that other website. Therefore, we cannot be responsible for the protection and privacy of any information which you provide whilst visiting such sites and such sites are not governed by this privacy statement. You should exercise caution and look at the privacy statement applicable to the website in question.</p>"
    },
    "home": {
      "id": "home",
      "title": "Home",
      "heroImage": {
        "url": "//images.contentful.com/g99n9a78vx0s/2U93BNINsIgIKccgSo2Ewi/33107dd33838f8a51986fea1306ae9a7/hero.jpg",
        "title": "Coding On The Sofa",
        "description": "Someone lying on a sofa writing code on a laptop"
      },
      "profile": {
        "id": "profile",
        "title": "Profile",
        "body": "<p>I am a creative and conscientious software engineer with over 20 years experience in a variety of sectors. While most productive designing and writing backend systems, I am accomplished at leading cross functional teams and have extensive DevOps experience, especially with regards to CI/CD pipelines and containerisation. I also have reasonable frontend skills which include React, as demonstrated by the <a href='https://www.github.com/cressie176/www-app'>source code</a> for this site.</p>\n\n<p>Until recently I was operating in a dual role, firstly as CTO and co-founder of <a href='https://www.guidesmiths.com'>GuideSmiths</a>, a successful Node.js & microservices consultancy, secondly as principal consultant, leading technical teams designing and implementing solutions for GuideSmith’s clients.<p>\n\n</p>Due to a desire to spend more time with my family, I have negotiated an exit from GuideSmiths, and accepted a senior, hands-on position with <a href=\"https://www.tes.com\">Tes Global Ltd</a>, which can be predominantly carried out from the vicinity of my home in Suffolk.</p>\n\n\n"
      },
      "featuredSoftware": {
        "id": "software",
        "title": "Software",
        "icon": "fa-laptop",
        "items": [
          {
            "id": "yadda",
            "title": "Yadda",
            "summary": "A cucumber-esque BDD library, but with greater flexibility",
            "body": "A cucumber-esque BDD library, but with greater flexibility",
            "url": "https://www.github.com/acuminous/yadda"
          },
          {
            "id": "rascal",
            "title": "Rascal",
            "summary": "A friendly RabbitMQ client, with advanced error handling and mostly safe defaults",
            "body": "A friendly RabbitMQ client, with advanced error handling and mostly safe defaults",
            "url": "https://www.github.com/guidesmiths/rascal"
          },
          {
            "id": "marv",
            "title": "Marv",
            "summary": "A database migration library with pluggable drivers for PostgreSQL and MySQL",
            "body": "A database migration library with pluggable drivers for PostgreSQL and MySQL",
            "url": "https://www.github.com/guidesmiths/marv"
          },
          {
            "id": "confabulous",
            "title": "Confabulous",
            "summary": "A hierarchical configuration loader with support for remote sources such as S3, etcd and Vault",
            "body": "A hierarchical configuration loader with support for remote sources such as S3, etcd and Vault",
            "url": "https://www.github.com/guidesmiths/confabulous"
          },
          {
            "id": "systemic",
            "title": "Systemic",
            "summary": "A minimal dependency injection library",
            "body": "A minimal dependency injection library",
            "url": "https://www.github.com/guidesmiths/systemic"
          }
        ],
        "link": {
          "id": "See all software…",
          "text": "See all software…",
          "url": "/software"
        }
      },
      "featuredArticles": {
        "id": "articles",
        "title": "Featured Articles",
        "icon": "fa-file-text-o",
        "items": [
          {
            "id": 1002,
            "title": "Await - I'll See You In JavaScript Hell!",
            "author": {
              "id": "scresswell",
              "displayName": "Stephen Cresswell",
              "firstName": "Stephen",
              "lastName": "Cresswell",
              "jobTitle": "Moderator",
              "email": "email@stephen-cresswell.net",
              "mobile": "+44 (0)7814 033321"
            },
            "channel": {
              "id": "blog",
              "title": "Blog",
              "link": {
                "id": "Blog",
                "text": "Blog",
                "icon": "fa-file-text-o",
                "url": "/blog"
              },
              "introImage": {
                "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
                "title": "Duty Calls",
                "description": "A stick figure refusing to leave his computer and come to bed"
              },
              "introText": "\"Someone is wrong on the internet\"",
              "introLink": {
                "id": "Duty Calls",
                "text": "Duty Calls - xkcd",
                "url": "https://xkcd.com/386/"
              }
            },
            "tweetText": "Await%20-%20I'll%20See%20You%20In%20JavaScript%20Hell!",
            "keywords": [
              "Node.js",
              "JavaScript",
              "Promises",
              "Callback",
              "Await",
              "Software Craftsmanship"
            ],
            "summary": "<p>\nThe JavaScript callback vs promises debate is mostly over. Promises won, albeit by the back door of await. I for one welcome our new asynchronous overlords, but before we rush to our new programming nirvana let's take some time to look at the fallacy of promises and why they didn't save our codebases from nested damnation…\n</p>",
            "body": "<p>\nThe JavaScript callback vs promises debate is mostly over. Promises won, albeit by the back door of await. I for one welcome our new asynchronous overlords, but before we rush to our new programming nirvana let's take some time to look at the fallacy of promises and why they didn't save our codebases from nested damnation. The following is some code which could justifiably be accused of callback hell.\n\n<code>function welcomeToHell(cb) {\n  foo(err => {\n    if (err) return cb(err)\n    bar(err => {\n      if (err) return cb(err)\n      baz(err => {\n        if (err) return cb(err)\n        cb()\n      })\n    })\n  })\n}\n</code>\n<p>\nThe only reason the callback based code might look like this, is because its author did a shoddy job. By using a library like <a href=\"https://www.npmjs.com/package/async\">async</a> things can be much improved. That aside, if the code had been written with promises it might look as follows become…\n</p>\n<code>function salvationIsHere() {\n  return Promise.resolve()\n    .then(foo)\n    .then(bar)\n    .then(baz)\n}\n</code>\n<p>\nIf all promises code ever written looked like the example above I would stop now. It doesn't. Promises are simple when code follows a linear sequence or can run in parallel, but when you add conditions or iteration, just like with callbacks it become harder to keep them simple. As a result most of the promise based code I come across looks nothing like the above. Instead it looks like this…\n</p>\n<code>function welcomeBackToHell(email) {\n  return getUserByEmail(email)\n    .then(user => getUserRoles(user.id)\n      .then(roles => {\n        if (roles.indexOf('publisher') < 0) return { user, roles }\n        return getUserArticles(user.id)\n          .then(articles => ({ user, roles, articles }))\n      })\n  )\n}\n</code>\n<p>\nAll we've done is traded callback hell for promise hell. Now my point isn't that with appropriate care promisified code can't read well. <em>It can</em>. But this is equally true with <a href=\"https://github.com/cressie176/www-app/blob/master/server/lib/components/cms/cms.js\">callbacks</a>, providing you take the time to write functions that:\n</p>\n<ol>\n  <li>Have meaningful names</li>\n  <li>Are small (I aim for &lt;=4 lines)</li>\n  <li>Do one thing well</li>\n  <li>Have a single level of abstraction</li>\n  <li>Minimise parameters (I aim for &lt;= 2 excluding cb)</li>\n  <li>Avoid booleans</li>\n  <li>Minimise conditional logic (guard conditions permitted)</li>  \n</ol>\n<p>\nand modules that:\n</p>\n<ol>\n  <li>Have meaningful names</li>\n  <li>Have a single responsibility</li>\n  <li>Encapsulate data and behaviour</li>\n</ol>\n<p>\nTo write coherent and cohesive code you have to understand and care about the principles of software craftsmanship. This is thousands of times more important than whether you use callbacks, promises or await. We seem to have forgotten, but lets try to remember before we damn ourselves to another level of asynchronous hell with await.\n</p>",
            "date": "2017-08-26T18:00:00.000Z",
            "images": {
              "id": "Await - I'll See You In Hell",
              "thumbnail": {
                "url": "//images.contentful.com/g99n9a78vx0s/Ayv9uj9UyWu6oOge8sYMo/0468e8bccf21a0062f02d2826ed1c43e/pinhead-720x540.jpg",
                "title": "Thubmnail of Pinhead",
                "description": "Pinhead from the Hellraiser franchise"
              }
            },
            "url": "/blog/await-ill-see-you-in-javascript-hell-1002"
          },
          {
            "id": 1001,
            "title": "When Orange Is Not The New Black",
            "author": {
              "id": "scresswell",
              "displayName": "Stephen Cresswell",
              "firstName": "Stephen",
              "lastName": "Cresswell",
              "jobTitle": "Moderator",
              "email": "email@stephen-cresswell.net",
              "mobile": "+44 (0)7814 033321"
            },
            "channel": {
              "id": "blog",
              "title": "Blog",
              "link": {
                "id": "Blog",
                "text": "Blog",
                "icon": "fa-file-text-o",
                "url": "/blog"
              },
              "introImage": {
                "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
                "title": "Duty Calls",
                "description": "A stick figure refusing to leave his computer and come to bed"
              },
              "introText": "\"Someone is wrong on the internet\"",
              "introLink": {
                "id": "Duty Calls",
                "text": "Duty Calls - xkcd",
                "url": "https://xkcd.com/386/"
              }
            },
            "tweetText": "When%20Orange%20Isn't%20The%20New%20Black",
            "keywords": [
              "Node.js",
              "Software",
              "JavaScript"
            ],
            "summary": "<p>\nFrameworks come and go so quickly that with some notable exceptions any libraries you depend on today, could be superseded tomorrow. There's a cost to adoption, but often a larger cost to migrate away. Jump on the band wagon too soon and you get the pain while a project is unstable, leave it too late and supporting community may already moving on.\n</p>\n<p>\nHow do you tell when orange really is the new black, rather than being the emperors new clothes?\n</p>",
            "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/8deT28SVQ4IqIcW8cI0i8/e6f3ef6fcf6f9bf92caa091ad13e0779/orange-is-the-new-black-1024x414.jpg\" title=\"Orange Is Not The New Black\" alt=\"Orange Is Not The New Black\" />\n<p>\nThe pace of software development is faster than ever before. Languages, libraries and applications emerge for their 15 minutes of fame, before being relegated to the C-List just as quickly. But at what cost?\n</p>\n<p>\nI remember when I first discovered open source. Adding a new library to a software project felt like adding value, with the added bonus that it was code I didn't have to write, test or maintain. But was there always a significant and worthwhile benefit?\n</p>\n<p>\nI remember a colleage complaining about the Spring framework, and that it was too much for him to learn. At a time when the most popular alternatives were <a href=\"https://struts.apache.org/\">Struts<a>, <a href=\"http://tapestry.apache.org/\">Tapestry</a>, <a href=\"http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html\">JSF</a> and his preferred option of vanilla <a href=\"https://docs.oracle.com/cd/E17904_01/web.1111/e13712/basics.htm\">Servlets and JSP</a> I didn't have much sympathy for him. Why should his reluctance to pick up new technology limit everyone elses productivity? Surely learning new tools is a key part of of the job?\n</p>\n<p>\nNow I often find myself facing a similar situation, but from the other site of the argument. I'm no ludite. I was an early adopter of docker, with a <a href=\"https://github.com/moby/moby/commit/fe727e2a87fa086d728664c396fd44f4be6d6afd\">commit</a> from 2013 to prove it. I have maintain several moderately popular Node.js packages, and spent the last year writing in Go. Despite frontend devleopment not being a core part of my job, I am comfortable enough with React to build websites like this one. So what's the problem?\n</p>\n<p>\nThe first problem is that frameworks come and go so quickly that with some noteable exceptions any libraries you depend on today, could be superseeded tomorrow. There's a cost to adoption, but often a larger cost to migrate away. Jump on the band wagon too soon and you get the pain while a project is unstable, leave it too late and supporting community may already moving on. \n</p>\n<p>\nThe second problem is that the new library or tool is either poorly designed or doesn't bring enough value to justitfy the cost, but that the developers introducing haven't been bitten enough times in the past to be wary.\n</p>\n<p>\nLet's consider three examples, <a href=\"https://www.npmjs.com/package/hapi\">hapi</a>, <a href=\"https://www.npmjs.com/package/yarn\">yarn</a> and <a href=\"https://www.npmjs.com/package/jest\">jests</a>. I have deliberately picked both these libraries because they are from large organisations, have a significant user base and received a lot of positive publicitly. Several teams I work with have moved, or are considering moving to them.\n</p>\n<p>\nMy preferred http server has always been <a href=\"https://www.npmjs.com/package/express\">express</a>, for the simple reason that it doesn't try to be in charge. Provided my handlers conform to a few trivial middleware conventions I'm good. A few years ago I was leading a team that wanted to move to <a href=\"https://www.npmjs.com/package/hapi\">hapi</a>. A pair of developers evaluated it, recommended it and so we started using it in all new services. It was a huge mistake. Hapi takes the opposite approach to express. It wants to be boss, exerting a strong influencing over how your code and tests are written. Discontent with hapi grew over the the next few months and the team switched back to express. Four years on there are still a handful of hapi services running that nobody wants to touch.\n</p>\n<p>\nWhen yarn was released it was well received. It was faster than npm and did a better job of locking transitive dependencies. With the release of npm 5 most of yarn's advantages have been negated. In order to support yarn, the organisation I work for had to make code changes to their build pipeline. At least some of those same teams are now considering moving back.\n</p>\n<p>\nThe new unit testing framework on the block is <a href=\"https://www.npmjs.com/package/jest\">Jest</a>. There are a whole series of blog posts from organisations who have successfully migrated from mocha to jest and report reaping the benefits. When I look at Jest I see everything I want to avoid in a unit test framework.\n</p>\n\n<ul>\n  <li>It wants to run your tests for you rather than making programmatic invocation a first class citizen, putting you at the mercy of its file globbing.</li>\n  <li>It uses a global \"expect\" function which doesn't differtiate whether it's being called from a previously executed test or the current one, resulting in difficult to diagnose failures.</li>\n  <li>It uses a fluid assertion api, leading to tests that are higher in ceromony, lower in essence.</li>\n  <li>Through its support for mocking it encourages testing interactions rather than side effects, which results in brittle and opaque test.</li>\n  <li>Through its support for snapshots it encourages brittle, whole document comparision tests</li>\n</ul>\n<p>\nThe irony of my last example is that I use jest for testing this site. Since it is configured by default with <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>. While not reported in those same blog posts I had plenty of teething problems with Jest, from it.only still isn't working reliably and configuration has been neutered. Despite my reservations I've decided to stick with it. Given the support I'm sure these teething problems will get resolved and the react eco-system is sufficiently complex for me to want to stay on-piste as it were. I have a suspision that it's support for parallel testing will be worth the trouble, and if other teams are going to be adopting it, I might as well get on the band wagon.\n</p>\n<p>\nSo how do you tell when orange really is the new black, rather than being a case of the emperors new clothes? The answer is to be suspicious of any library that:\n</p>\n<ul>\n  <li>has a steep and/or prolonged learning curve</li>\n  <li>is accompanied by an unusual amount of hype</li>  \n  <li>significantly changes the design of your appliation</li>\n  <li>is accompanied by its own testing tools (a well designed library shouldn't need one)</li>\n  <li>wants to \"start\" your application</li>\n  <li>is primarily used for lily gilding</li>\n  <li>has poor documentation and who's issues go unanswered</li>  \n</ul>\n</p>\n<p>\nThat is unless the library in question written by me. In which case you should definitely use it without thinking twice.\n</p>\n",
            "date": "2017-08-19T18:00:00.000Z",
            "images": {
              "id": "Orange Is Not The New Black",
              "thumbnail": {
                "url": "//images.contentful.com/g99n9a78vx0s/4J3pfkFcTYQq8giGaCwSC8/7953f2c1dd967032cab1aa26b1c91bd3/orange-is-the-new-black-720x540.jpg",
                "title": "Thumbnail of Orange Is Not The New Black",
                "description": "Orange Is Not The New Black "
              }
            },
            "url": "/blog/when-orange-is-not-the-new-black-1001"
          },
          {
            "id": 1000,
            "title": "10½ Factor Microservices",
            "author": {
              "id": "scresswell",
              "displayName": "Stephen Cresswell",
              "firstName": "Stephen",
              "lastName": "Cresswell",
              "jobTitle": "Moderator",
              "email": "email@stephen-cresswell.net",
              "mobile": "+44 (0)7814 033321"
            },
            "channel": {
              "id": "blog",
              "title": "Blog",
              "link": {
                "id": "Blog",
                "text": "Blog",
                "icon": "fa-file-text-o",
                "url": "/blog"
              },
              "introImage": {
                "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
                "title": "Duty Calls",
                "description": "A stick figure refusing to leave his computer and come to bed"
              },
              "introText": "\"Someone is wrong on the internet\"",
              "introLink": {
                "id": "Duty Calls",
                "text": "Duty Calls - xkcd",
                "url": "https://xkcd.com/386/"
              }
            },
            "tweetText": "10%C2%BD%20Factor%20Microservices",
            "keywords": [
              "Node.js",
              "Microservices",
              "12 Factor",
              "Docker"
            ],
            "summary": "<p>\nBy now you've probably heard of the <a href='https://12factor.net'>12 Factor</a> design principles. Overall they are very good. However as with any piece of advice they should be viewed in the context of when they were written, and reassessed in the current content to see to what extent they are still valuable. In the context of Node.js microservices how will the 12 factor principles stack up?\n</p>",
            "body": "<p>\nBy now you've probably heard of the <a href=\"https://12factor.net\">12 Factor</a> design principles. Overall they are very good, but as with any piece of advice they should be viewed in the context of when they were written, and reassessed in the current content to see to what extent they are still valuable.\n</p><p>\nThe context I'm most interested in is that of microservice development,  with Node.js. Node is a great fit for microservces in most situations. The module system is excellent, so it's easy to reuse and share code. Once mastered JavaScript can be terse, yet readable, it's interpreted so doesn't suffer from compilation delays, but thanks to V8 fast enough for the majority of applications. The only time I've found Node problematic is when performing event loop blocking operations or when interacting with a server who's client libraries are of dubious quality. With the scene set, how will the 12 factor principles stack up?\n</p>\n<h2>Codebase (1)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/2sohHw99zqsmuQWqkmCYcw/a7d4ac73cde04f7ce2b04c13b00b2bab/codebase-1024x768.jpg\" title=\"Codebase\" alt=\"A programmer typing on a keyboard\" />\n<p>\nThe first of the principles - \"Codebase\" is also the most easily challenged. The principle states that there should be a 1-1 relationship between codebase and source repository, with consideration for branches and forks etc. \n</p>\n<p>\nI sympathise entirely with what I suspect to be the underlying motivation. I've had to suffer a number of projects with complicated, multi-stage setup, linked repositories (e.g. git sub-modules), shared build scripts and all encompassing development environments which made life a misery. However the glaring problem with this principle is that it prohibits monorepos, where multiple applications are stored in a single repository. Monorepos aren't without their problems - without appropriate tooling it is difficult to know what to build, test and deploy, but have certain advantages such as making it easier to make sweeping changes to the entire codebase.\n</p>\n<h2>Dependencies (2)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/jGfmTiIZEW88GOIMCSU8u/675b86d953174e791fac4f35e85de04a/dependencies-1024x768.jpeg\" title=\"Dependencies\" alt=\"Stars from a baby's mobile\" />\n<p>\nThe second principle, \"Explicitly declare and isolate dependencies\", is more sound. Version and bundle all dependencies with the application, rather than trusting to their correct existence on deployment. Node.js solves this in a similar way to most other modern languages, by including a dependencies manifest. The latest version of Node's package manager automatically creates a lock file, so even transitive dependencies are explicitly versioned, however there are some situations in which even this is not enough.\n</p><p>\nSome node modules have native dependencies, which must be present in the target environment in order to work. Examples are <a href=\"https://github.com/gsmcwhirter/node-zoneinfo\">zoneinfo</a>, <a href=\"https://www.npmjs.com/package/pg-native\">pg-native</a> and <a href=\"https://www.npmjs.com/package/node-expat\">node-expat</a>. To truly conform to this principle, these dependencies should be bundled too, as must Node.js itself, and this is where <a href=\"https://www.docker.com/\">docker</a> comes in.\n</p><p>\nBy deploying your application within a docker container, and by including its dockerfile in your codebase you can not only version the non-native dependencies, but the native ones as well. \n</p><p>\n<h2>Backing Services (4) and Dev/Prod Parity (10)</h2>\n<div class=\"row\">\n<div class=\"col-md-6\">\n<img src=\"https://images.contentful.com/g99n9a78vx0s/5VN3f8hLB6gwgmauwmKKoa/11dfc597c2e980d9bf7375878429a96a/backing-services-1024x768.jpeg\" title=\"Backing Services\" alt=\"A server communicating with database and web service\"/>\n</div>\n<div class=\"col-md-6\">\n<img src=\"https://images.contentful.com/g99n9a78vx0s/3VDwtMdYykG8cki4C2OQ6u/25a707ce6c7e17a05c2b2a22653a4b2c/dev-prod-parity-1024x768.jpg\" title=\"Dev/Prod Parity\" alt=\"Two nearly identical robots\" />\n</div>\n</div>\nWhile we're on the subject of docker and containerisation, we may as well tick off the forth (backing services), and tenth (dev/prod parity) principles. The backing services principle states that external services (databases, message brokers, other web services, etc) should be treated as \"attached resources\", which can be substituded without having to rebuild and redeploy the application. \n</p><p>\nThis is achievable through external configuration, but made even easier by the service discovery provided by docker, and related technologies such as <a href=\"https://kubernetes.io\">Kubernetes</a>. Kubernetes even comes with a <a href=\"https://kubernetes.io/docs/admin/kube-proxy/\">proxy</a> which enables you to attach a locally running application to a kubernetes managed backing service transparently.\n</p>\n<p>\nBy deploying services within containers, you get a high degree of dev/prod parity, and even more if you deploy databases and message brokers within containers too. Despite this I tend to only do this locally and on CI for serious applications as I've encountered more than my share of issues with mounting network attached storage into docker containers, especially when managed by Kubernetes.\n</p>\n<h2>Config (3)</h2>\n<p>\nUnfortunately the 3rd principle of storing configuration (only) in the environment isn't as well thought out. The 12 factor principles argue that\n</p>\n<ol>\n  <li>against named environments because you will run out of meaningful names</li>\n  <li>for limiting configuration to environment variables, since files can be scattered, inconsistent and may accidentally be checked into source control</li>\n</ol>\n<p>\nMy counter to argument 1, is that in every organisation I've ever worked as, people always refer to environments by name, and so having a named environment configuration makes life significantly easier.\n</p><p>\nMy problem with argument 2, is that I specifically want to check config (excluding secrets) into source control. This enables it to be versioned and deployed with the application, for the same reasons behind the principle of dependency management. Furthermore environment variables lack native structure and typing and cannot be changed at runtime. They are also the <a href=\"https://www.theregister.co.uk/2017/08/02/typosquatting_npm/\">easiest configuration to steal</a>.\n</p><p>\nInstead my approach is to use whatever config source makes most sense (which can include environment variables). I <a href=\"https://github.com/cressie176/www-app/tree/master/server/config\">version control a default config file, and environmental overrides</a> with the application source, then further override with secrets at deploy or runtime using an appropriate secrets management tool such as <a href=\"https://github.com/StackExchange/blackbox\">blackbox</a>, <a href=\"https://www.vaultproject.io/\">vault</a> or <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Kubernetes</a>. I use <a href=\"https://www.npmjs.com/package/confabulous\">Confabulous</a>, a library of my own creation similar to <a href=\"https://www.npmjs.com/package/nconf\">nconf</a>, to handle the merging and overrides.\n</p>\n<h2>Build, Release, Run (5), Processes (6) and Port Binding (7)</h2>\n<p>\nThe next 3 principles aren't very interesting. Separating Build, Release, Run (principle 5) is trivial with docker...\n</p>\n<ul>\n<li>Build and image from a clean checkout</li>\n<li>Push to a repository</li>\n<li>Run on a remote server</li>\n</ul>\n<p>\nI prefer a self managed CI server such as <a href=\"https://jenkins.io/\">Jenkins</a> for building images and orchestrating deployments. With your own server you can preinstall build dependencies, cache images and have fewer security concerns. As a result, some of our microservices build, test and deploy in under 20 seconds.\n</p>\n<p>\nPrinciple 6, stateless processes just boils down to using a database rather than memory to persist any data which spans a request, and Principle 7, port binding means your application should start it's own server rather than be deployed into an application server. Popular in the Java world, but not in Nodeland.\n</p>\n<h2>Concurrency (8) and Admin Processes (12)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/493at3Zgc0smAquIsIA8uC/e240f820a8f659877b7acd75b3b39bcb/concurrency-1024x768.jpg\" title=\"Concurrency\" alt=\"A graph showing process instances by worker diversity\" />\n<p>\nPrinciple 8, concurrency is highly relevant in a Node.js and microservice environment. This principle advocates scaling by distributing functionality to worker processes, whos instances may grow and shrink depending on demand. i.e. microservices 101. I've also found this a useful approach for circumventing one of Node's limitations. If you have an node process which by necessity performs some long running synchronous operation (e.g. parsing a large XML file), then it will block all other tasks. By separating the synchronous and asynchronous behaviour into different services, you bypass the problem.\n</p><p>\nWe take the same approach for admin processes (principle 12). They either exist as a temporary service, launching from their own docker container and running to completion, or they lie dormant in another permanently running service and can be triggered either by http request or message.\n</p>\n\n<h2>Disposability (9)</h2>\n<img src=\"https:////images.contentful.com/g99n9a78vx0s/5UBtNZVk6kSGeQ0IWm6Cwc/e03218aed927f0b59df6a34c28c08e1c/disposability-1024x768.jpg\" title=\"Disposability\" alt=\"A waste paper basket\"/>\n<p>\nPrinciple 9, disposability is also interesting, and often under appreciated. The principle states that applications should startup and shutdown quickly and gracefully. By gracefully I mean that applications should not attempt to perform any work until all necessary resources (databases connections etc) have been established. When receiving a shutdown signal the application should stop accepting new work, but wait for inflight tasks to complete and only then close connections to attached resources. \n</p><p>\nDepending on your number of microservices, and variety of backing services, this can be surprisingly difficult to orchestrate in a consistent way. My esteemed comrade <a href=\"https://github.com/BorePlusPlus\">Dalibor Novak</a> worked with me creating <a href=\"https://www.npmjs.com/package/systemic\">systemic</a> for solving this problem. You can see it in action <a href=\"https://github.com/cressie176/www-app/tree/master/server/lib\">here</a>\n</p>\n<h2>Logs (11)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/4KUiWSfUasommuGiO0E2mi/9b648e38d75e13f6e6055a27148e990d/logs-1024x768.jpeg\" title=\"Logs\" alt=\"Logs being transported down a river\"/>\n<p>\nThe remaining principle is to treat logs as event streams. The advice is to write logs, unbuffered to stdout, then route these to dedicated logging infrastructure. I agree, but think they missed a trick. Rather than writing directly to console or your logging framework of choice your application should also emit log messages as events. By doing so each message can have multiple consumers, which may include one which writes to the console, but could additionally include one which publishes events to a message bus or monitoring system such as <a href=\"https://prometheus.io/\">Prometheus</a>. As an added bonus it becomes trivial to selectively silence are asset logged events in automated tests. Node has excellent support for <a href=\"https://nodejs.org/api/events.html\">events</a>, but using it for logging would be rather unusual. For this reason (and others) I've wrapped the event emitter behind a loglike api in a library called <a href=\"https://www.npmjs.com/search?q=prepper\">prepper</a>. You can connect it to console, bunyan or any other logging framework to get the benefits given above while retaining your logger choice.\n\nThe remaining principle is to treat logs as event streams. The advice is to write logs, unbuffered to stdout, then route these to dedicated logging infrastructure. I agree, but think they missed a trick. Rather than writing directly to stdout or your logging framework of choice your application should emit log messages as internal events. By doing so each message can have multiple consumers, which may include one which writes to stdout, but could additionally include one which publishes events to a message bus or monitoring system such as <a href=\"https://prometheus.io/\">Prometheus</a>. As an added bonus it becomes trivial to selectively silence or assert logged events in automated tests. Node has excellent support for <a href=\"https://nodejs.org/api/events.html\">events</a>, but using it for logging would be rather unusual. For this reason (and others) I've wrapped the event emitter behind a loglike API in a library called <a href=\"https://www.npmjs.com/search?q=prepper\">prepper</a>. You can connect it to console, bunyan or any other logging framework to get the benefits given above while retaining your logger of choice.\n\n</p>\n<h2>In Conclusion...</h2>\n<p>\nOf all the 12 factor principles, the only one I fully disagree with is that of config (-1). The codebase principle is still valid in spirit, even if the concerns about the relationship between source code and repository has  dated (-½). Given the extent to which Node.js, Microservices and containerisation have revolutionised how we design, write and deploy code. 10½ out of 12 is pretty good.\n</p>\n\n\n\n\n\n\n\n\n",
            "date": "2017-08-12T20:00:00.000Z",
            "images": {
              "id": "10½ Factor Microservices With Node.js",
              "thumbnail": {
                "url": "//images.contentful.com/g99n9a78vx0s/3aMxdRlFxuggOWEqeIYm6i/53409a51c6e8a38616576e3cbae97b9f/ten-and-a-half-factor-720x540.jpg",
                "title": "Thumbnail of a 12 Sided  Dice",
                "description": "A 12 sided dice showing 10½"
              }
            },
            "url": "/blog/10-factor-microservices-1000"
          }
        ],
        "link": {
          "id": "See all articles…",
          "text": "See all articles…",
          "url": "/blog"
        }
      },
      "featuredTalks": {
        "id": "talks",
        "title": "Upcoming & Recent Talks",
        "icon": "fa-microphone",
        "items": [
          {
            "id": 1,
            "title": "Enterprise Grade Microservices",
            "author": {
              "id": "scresswell",
              "displayName": "Stephen Cresswell",
              "firstName": "Stephen",
              "lastName": "Cresswell",
              "jobTitle": "Moderator",
              "email": "email@stephen-cresswell.net",
              "mobile": "+44 (0)7814 033321"
            },
            "channel": {
              "id": "talks",
              "title": "Talks",
              "link": {
                "id": "Talks",
                "text": "Talks",
                "icon": "fa-microphone",
                "url": "/talks"
              },
              "introImage": {
                "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
                "title": "Dreams vs Reality",
                "description": "Go on go on go on go on go on go on go on"
              },
              "introText": "\"How did that gobshite get on the television?\"",
              "introLink": {
                "id": "Father Ted - Channel 4",
                "text": "Father Ted - Channel 4",
                "url": "http://www.channel4.com/programmes/father-ted"
              }
            },
            "tweetText": "Enterprise%20Grade%20Microservices",
            "keywords": [
              "Node.js",
              "12 Factor",
              "Microservices"
            ],
            "summary": "<p>Microservice adoption is driven by promises of simplicity, flexibility, resilience and productivity. It liberates developers from clunky frameworks and legacy technology, enabling them to release faster and more frequently than ever before. With an effective deployment pipeline it is possible to have a new microservice running in production and delivering value within 15 minutes, and to achieve 20+ production releases a day…</p>",
            "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/4pBKNjkDzaoiYqsScA6aQ2/2adc227a96754741c608e4c1ec9757fb/enterprise-grade-microservices-720x540.jpg\" title=\"Enterprise Grade Microservices\" alt=\"Businessman standing by the window in an office tower\" />\n<p>Microservice adoption is driven by promises of simplicity, flexibility, resilience and productivity. It liberates developers from clunky frameworks and legacy technology, enabling them to release faster and more frequently than ever before. With an effective deployment pipeline it is possible to have a new microservice running in production and delivering value within 15 minutes, and to achieve 20+ production releases a day.</p>\n\n<p>But the fast pace, technological freedom and segregated codebase is not without cost. The maxim that a microservice codebase doesn't matter because it's small, won't change and is easily replaced is more often false than it is true.</p>\n\n<p>The principles behind clean code and 12 factor apps are just as applicable to microservices as they are to monoliths, but are all too easily ignored in the typical hubbub and hype that surrounds microservice adoption.</p>",
            "date": "2016-11-23T19:00:00.000Z",
            "event": {
              "id": "Corp.js - Enterprise Grade Microservices",
              "text": "Corp.js",
              "url": "https://www.meetup.com/Corporate-JavaScript-Meetup-Budapest/"
            },
            "location": "Budapest",
            "images": {
              "id": "Enterprise Grade Microservices",
              "thumbnail": {
                "url": "//images.contentful.com/g99n9a78vx0s/3rAYG3rbaEI6Ka4SwigAuA/a0c40e3e2e6113fcdbf3323775f35665/enterprise-grade-microservices-720x540.jpg",
                "title": "Thumbnail of Enterprise Grade Microservices",
                "description": "Businessman standing by a window in a skyscraper"
              }
            },
            "url": "/talks/enterprise-grade-microservices-1"
          },
          {
            "id": 2,
            "title": "Divorcing Microservices With Rascal",
            "author": {
              "id": "scresswell",
              "displayName": "Stephen Cresswell",
              "firstName": "Stephen",
              "lastName": "Cresswell",
              "jobTitle": "Moderator",
              "email": "email@stephen-cresswell.net",
              "mobile": "+44 (0)7814 033321"
            },
            "channel": {
              "id": "talks",
              "title": "Talks",
              "link": {
                "id": "Talks",
                "text": "Talks",
                "icon": "fa-microphone",
                "url": "/talks"
              },
              "introImage": {
                "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
                "title": "Dreams vs Reality",
                "description": "Go on go on go on go on go on go on go on"
              },
              "introText": "\"How did that gobshite get on the television?\"",
              "introLink": {
                "id": "Father Ted - Channel 4",
                "text": "Father Ted - Channel 4",
                "url": "http://www.channel4.com/programmes/father-ted"
              }
            },
            "tweetText": "Divorcing%20Microservices%20With%20Rascal",
            "keywords": [
              "Node.js",
              "Rascal",
              "RabbitMQ",
              "Microservices"
            ],
            "summary": "<p>Microservice based architectures are everywhere, but to succeed you must find ways to decouple your services so they can be developed and deployed in isolation. A popular strategy is to use a message broker, which in addition to providing the decoupling, can also add robustness and scalability. But messaging can be deceptively difficult. Which broker suits your needs best? Should you follow a \"command\" or \"event\" based model? How will you handle duplicates? Can you tolerate message loss? Will you recover from errors by discarding, retrying or dead lettering?</p>",
            "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/1CYrJfCdiEMmO2GqsiQOMc/7ad6800d453f62b42880e4c34ecd8dac/divorcing-microservices-with-rascal-720x540.jpg\" title=\"Divorcing Microservices With Rascal\" alt=\"Hands holding a torn picture of a heart\" />\n\n<p>Microservice based architectures are everywhere, but to succeed you must find ways to decouple your services so they can be developed and deployed in isolation. A popular strategy is to use a message broker, which in addition to providing the decoupling, can also add robustness and scalability. But messaging can be deceptively difficult. Which broker suits your needs best? Should you follow a \"command\" or \"event\" based model? How will you handle duplicates? Can you tolerate message loss? Will you recover from errors by discarding, retrying or dead lettering?</p>\n\n<p>If these questions weren't enough, you have to find a good client library. For RabbitMQ there's the excellent <a href=\"https://github.com/squaremo/amqp.node\">ampqlib</a>, but it's not for the faint of heart. Estabilishing a communication channel with the broker requires serveral api calls, and will not be automatically be restablished if dropped. Messages are not persistent or confirmed by default. Errors are likely to crash your application, and there's no support for clustering.</p>\n\n<p>Enter <a href=\"https://www.github.com/guidesmiths/rascal\">Rascal</a>, a friendly, config driven RabbitMQ client which sits on top of amqplib, simplyfing adoption significantly.</p>",
            "date": "2016-06-29T19:00:00.000Z",
            "event": {
              "id": "Node.js Meetup - Divorcing Microservices With Rascal",
              "text": "Node.js Meetup",
              "url": "https://www.meetup.com/Node-js-Meetup-London/events/231560165/"
            },
            "location": "London",
            "images": {
              "id": "Divorcing Microservices With Rascal",
              "thumbnail": {
                "url": "//images.contentful.com/g99n9a78vx0s/1qT8990i1SqsACkwECicAI/ed05fc680b9409d92d0ebc46ca2b274a/divorcing-microservices-with-rascal-720x540.jpg",
                "title": "Thumbnail of Microservices With Rascal",
                "description": "A picture of a heart, ripped in two"
              }
            },
            "url": "/talks/divorcing-microservices-with-rascal-2"
          },
          {
            "id": 3,
            "title": "Yadda - The Other BDD Library",
            "author": {
              "id": "scresswell",
              "displayName": "Stephen Cresswell",
              "firstName": "Stephen",
              "lastName": "Cresswell",
              "jobTitle": "Moderator",
              "email": "email@stephen-cresswell.net",
              "mobile": "+44 (0)7814 033321"
            },
            "channel": {
              "id": "talks",
              "title": "Talks",
              "link": {
                "id": "Talks",
                "text": "Talks",
                "icon": "fa-microphone",
                "url": "/talks"
              },
              "introImage": {
                "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
                "title": "Dreams vs Reality",
                "description": "Go on go on go on go on go on go on go on"
              },
              "introText": "\"How did that gobshite get on the television?\"",
              "introLink": {
                "id": "Father Ted - Channel 4",
                "text": "Father Ted - Channel 4",
                "url": "http://www.channel4.com/programmes/father-ted"
              }
            },
            "tweetText": "Yadda%20-%20The%20Other%20JavaScript%20Library",
            "keywords": [
              "Node.js",
              "Testing",
              "BDD",
              "Yadda"
            ],
            "summary": "<p>The JavaScript community has got rather confused about BDD. The most popular tools, Jasmine, Mocha, Vows, Chai and Expect are proclaimed as BDD, but they're not. Jasmine, Mocha and Vows, are excellent test frameworks, but from a BDD perspective they merely describe('some test function') with text. Chai and Expect don't even do this, they are fluid assertion apis, which attempt to simulate an ordinary language a.bit.like.this() at the cost of additional ceremony. Surely there's more to BDD…</p>",
            "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/FntIzfFlAGWGOQMcoUCOm/0212b9817bd81ebf80a6726ed1191ffb/yadda-1024x768.jpg\" title=\"Yadda\" alt=\"Man sitting among boxes labelled as JavaScript BDD librarys\" />\n\n<p>The JavaScript community has got rather confused about BDD. The most popular tools, Jasmine, Mocha, Vows, Chai and Expect are proclaimed as BDD, but they're not. Jasmine, Mocha and Vows, are excellent test frameworks, but from a BDD perspective they merely describe('some test function') with text. Chai and Expect don't even do this, they are fluid assertion apis, which attempt to simulate an ordinary language a.bit.like.this().</p>\n\n<p>The only true BDD tool found for JavaScript is CucumberJS. The problem with CucumberJS is that the Gerkin syntax is restrictive. I don't want to be limited to starting my sentences with \"Given\", \"When\", \"Then\", \"And\" and \"But\". I want to express myself naturally.</p>\n\n<p>I also want a test runner that makes good decisions about which steps to run, that works in a browser and that lets me plugin different step libraries so that I can test multiple interfaces (e.g. rest and HTML) with the same scenarios. I even want a tool that has nothing to do with testing and just maps ordinary sentences to functions so I could use it in a rules engine or build script.</p>\n\n<p>That's why I wrote <a href=\\'http://www.github.com/acuminous/yadda\\'>Yadda</a> - the other JavaScript BDD library.</p>",
            "date": "2016-04-26T18:00:00.000Z",
            "event": {
              "id": "Community For Agile Testing - Yadda",
              "text": "Community For Agile Testing",
              "url": "https://www.meetup.com/es-ES/Community-for-Agile-Testing/events/229788565/"
            },
            "location": "London",
            "images": {
              "id": "Yadda - The Other BDD Library",
              "thumbnail": {
                "url": "//images.contentful.com/g99n9a78vx0s/3ipHCk26VGWG8YQiiy4kss/fd1988b7d5aa41f645b96fc9082fad07/yadda-720x540.jpg",
                "title": "Thumbnail of Yadda - The Other BDD Library",
                "description": "Man sitting among boxes labelled chai, jasmine, mocha, vows and cucumber"
              }
            },
            "url": "/talks/yadda-the-other-bdd-library-3"
          }
        ],
        "link": {
          "id": "See all talks…",
          "text": "See all talks…",
          "url": "/talks"
        }
      }
    },
    "terms-and-conditions": {
      "id": "terms-and-conditions",
      "title": "Terms & Conditions",
      "body": "<p>Welcome to our website. If you continue to browse and use this website, you are agreeing to comply with and be bound by the following terms and conditions of use, which together with our privacy policy govern our relationship with you in relation to this website. If you disagree with any part of these terms and conditions, please do not use our website.</p>\n\n<p>The term 'us' or 'we' refers to the owner of the website. The term 'you' refers to the user or viewer of our website.</p>\n\n<p>The use of this website is subject to the following terms of use:\n\n<ol>\n<li>The content of the pages of this website is for your general information and use only. It is subject to change without notice.</li>\n<li>This website uses cookies to monitor browsing preferences. If you do allow cookies to be used, the personal information may be stored by us for use by third parties.</li>\n<li>Neither we nor any third parties provide any warranty or guarantee as to the accuracy, timeliness, performance, completeness or suitability of the information and materials found or offered on this website for any particular purpose. You acknowledge that such information and materials may contain inaccuracies or errors and we expressly exclude liability for any such inaccuracies or errors to the fullest extent permitted by law.</li>\n<li>Your use of any information or materials on this website is entirely at your own risk, for which we shall not be liable. It shall be your own responsibility to ensure that any products, services or information available through this website meet your specific requirements.</li>\n<li>This website contains material which is owned by or licensed to us. This material includes, but is not limited to, the design, layout, look, appearance and graphics. Reproduction is prohibited other than in accordance with the copyright notice, which forms part of these terms and conditions.</li>\n<li>All trade marks reproduced in this website which are not the property of, or licensed to, the operator are acknowledged on the website.</li>\n<li>Unauthorised use of this website may give rise to a claim for damages and/or be a criminal offence.</li><li>From time to time this website may also include links to other websites. These links are provided for your convenience to provide further information. They do not signify that we endorse the website(s). We have no responsibility for the content of the linked website(s).</li>\n<li>Your use of this website and any dispute arising out of such use of the website is subject to the laws of England, Northern Ireland, Scotland and Wales.</li>\n</ol>\n</p>"
    },
    "talks": {
      "id": "talks",
      "title": "Talks",
      "link": {
        "id": "Talks",
        "text": "Talks",
        "icon": "fa-microphone",
        "url": "/talks"
      },
      "introImage": {
        "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
        "title": "Dreams vs Reality",
        "description": "Go on go on go on go on go on go on go on"
      },
      "introText": "\"How did that gobshite get on the television?\"",
      "introLink": {
        "id": "Father Ted - Channel 4",
        "text": "Father Ted - Channel 4",
        "url": "http://www.channel4.com/programmes/father-ted"
      }
    }
  },
  "linkLists": {
    "contact": {
      "id": "contact",
      "title": "Contact",
      "links": [
        {
          "id": "Email",
          "text": "hello@stephen-cresswell.net",
          "icon": "fa-envelope",
          "url": "mailto:hello@stephen-cresswell.net"
        },
        {
          "id": "Mobile",
          "text": "+44 (0)7814033321",
          "icon": "fa-phone",
          "url": "tel:+447814033321"
        }
      ]
    },
    "navigation": {
      "id": "navigation",
      "title": "Navigation",
      "links": [
        {
          "id": "Home",
          "text": "Home",
          "icon": "fa-home",
          "url": "/"
        },
        {
          "id": "Blog",
          "text": "Blog",
          "icon": "fa-file-text-o",
          "url": "/blog"
        },
        {
          "id": "Talks",
          "text": "Talks",
          "icon": "fa-microphone",
          "url": "/talks"
        }
      ]
    },
    "social": {
      "id": "social",
      "title": "Social Networks",
      "links": [
        {
          "id": "GitHub",
          "icon": "fa-github",
          "url": "https://www.github.com/cressie176/"
        },
        {
          "id": "Linkedin",
          "icon": "fa-linkedin",
          "url": "https://www.linkedin.com/in/stephencresswell/"
        },
        {
          "id": "Twitter",
          "icon": "fa-twitter",
          "url": "https://www.twitter.com/cressie176"
        }
      ]
    },
    "legal": {
      "id": "legal",
      "title": "Legal",
      "links": [
        {
          "id": "Terms & Conditions",
          "text": "Terms & Conditions",
          "url": "/legal/terms-and-conditions"
        },
        {
          "id": "Privacy Policy",
          "text": "Privacy Policy",
          "url": "/legal/privacy-policy"
        }
      ]
    }
  },
  "projects": {
    "rascal": {
      "id": "rascal",
      "title": "Rascal",
      "summary": "A friendly RabbitMQ client, with advanced error handling and mostly safe defaults",
      "body": "A friendly RabbitMQ client, with advanced error handling and mostly safe defaults",
      "url": "https://www.github.com/guidesmiths/rascal"
    },
    "systemic": {
      "id": "systemic",
      "title": "Systemic",
      "summary": "A minimal dependency injection library",
      "body": "A minimal dependency injection library",
      "url": "https://www.github.com/guidesmiths/systemic"
    },
    "marv": {
      "id": "marv",
      "title": "Marv",
      "summary": "A database migration library with pluggable drivers for PostgreSQL and MySQL",
      "body": "A database migration library with pluggable drivers for PostgreSQL and MySQL",
      "url": "https://www.github.com/guidesmiths/marv"
    },
    "confabulous": {
      "id": "confabulous",
      "title": "Confabulous",
      "summary": "A hierarchical configuration loader with support for remote sources such as S3, etcd and Vault",
      "body": "A hierarchical configuration loader with support for remote sources such as S3, etcd and Vault",
      "url": "https://www.github.com/guidesmiths/confabulous"
    },
    "yadda": {
      "id": "yadda",
      "title": "Yadda",
      "summary": "A cucumber-esque BDD library, but with greater flexibility",
      "body": "A cucumber-esque BDD library, but with greater flexibility",
      "url": "https://www.github.com/acuminous/yadda"
    }
  },
  "articles": {
    "1": {
      "id": 1,
      "title": "Enterprise Grade Microservices",
      "author": {
        "id": "scresswell",
        "displayName": "Stephen Cresswell",
        "firstName": "Stephen",
        "lastName": "Cresswell",
        "jobTitle": "Moderator",
        "email": "email@stephen-cresswell.net",
        "mobile": "+44 (0)7814 033321"
      },
      "channel": {
        "id": "talks",
        "title": "Talks",
        "link": {
          "id": "Talks",
          "text": "Talks",
          "icon": "fa-microphone",
          "url": "/talks"
        },
        "introImage": {
          "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
          "title": "Dreams vs Reality",
          "description": "Go on go on go on go on go on go on go on"
        },
        "introText": "\"How did that gobshite get on the television?\"",
        "introLink": {
          "id": "Father Ted - Channel 4",
          "text": "Father Ted - Channel 4",
          "url": "http://www.channel4.com/programmes/father-ted"
        }
      },
      "tweetText": "Enterprise%20Grade%20Microservices",
      "keywords": [
        "Node.js",
        "12 Factor",
        "Microservices"
      ],
      "summary": "<p>Microservice adoption is driven by promises of simplicity, flexibility, resilience and productivity. It liberates developers from clunky frameworks and legacy technology, enabling them to release faster and more frequently than ever before. With an effective deployment pipeline it is possible to have a new microservice running in production and delivering value within 15 minutes, and to achieve 20+ production releases a day…</p>",
      "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/4pBKNjkDzaoiYqsScA6aQ2/2adc227a96754741c608e4c1ec9757fb/enterprise-grade-microservices-720x540.jpg\" title=\"Enterprise Grade Microservices\" alt=\"Businessman standing by the window in an office tower\" />\n<p>Microservice adoption is driven by promises of simplicity, flexibility, resilience and productivity. It liberates developers from clunky frameworks and legacy technology, enabling them to release faster and more frequently than ever before. With an effective deployment pipeline it is possible to have a new microservice running in production and delivering value within 15 minutes, and to achieve 20+ production releases a day.</p>\n\n<p>But the fast pace, technological freedom and segregated codebase is not without cost. The maxim that a microservice codebase doesn't matter because it's small, won't change and is easily replaced is more often false than it is true.</p>\n\n<p>The principles behind clean code and 12 factor apps are just as applicable to microservices as they are to monoliths, but are all too easily ignored in the typical hubbub and hype that surrounds microservice adoption.</p>",
      "date": "2016-11-23T19:00:00.000Z",
      "event": {
        "id": "Corp.js - Enterprise Grade Microservices",
        "text": "Corp.js",
        "url": "https://www.meetup.com/Corporate-JavaScript-Meetup-Budapest/"
      },
      "location": "Budapest",
      "images": {
        "id": "Enterprise Grade Microservices",
        "thumbnail": {
          "url": "//images.contentful.com/g99n9a78vx0s/3rAYG3rbaEI6Ka4SwigAuA/a0c40e3e2e6113fcdbf3323775f35665/enterprise-grade-microservices-720x540.jpg",
          "title": "Thumbnail of Enterprise Grade Microservices",
          "description": "Businessman standing by a window in a skyscraper"
        }
      },
      "url": "/talks/enterprise-grade-microservices-1"
    },
    "2": {
      "id": 2,
      "title": "Divorcing Microservices With Rascal",
      "author": {
        "id": "scresswell",
        "displayName": "Stephen Cresswell",
        "firstName": "Stephen",
        "lastName": "Cresswell",
        "jobTitle": "Moderator",
        "email": "email@stephen-cresswell.net",
        "mobile": "+44 (0)7814 033321"
      },
      "channel": {
        "id": "talks",
        "title": "Talks",
        "link": {
          "id": "Talks",
          "text": "Talks",
          "icon": "fa-microphone",
          "url": "/talks"
        },
        "introImage": {
          "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
          "title": "Dreams vs Reality",
          "description": "Go on go on go on go on go on go on go on"
        },
        "introText": "\"How did that gobshite get on the television?\"",
        "introLink": {
          "id": "Father Ted - Channel 4",
          "text": "Father Ted - Channel 4",
          "url": "http://www.channel4.com/programmes/father-ted"
        }
      },
      "tweetText": "Divorcing%20Microservices%20With%20Rascal",
      "keywords": [
        "Node.js",
        "Rascal",
        "RabbitMQ",
        "Microservices"
      ],
      "summary": "<p>Microservice based architectures are everywhere, but to succeed you must find ways to decouple your services so they can be developed and deployed in isolation. A popular strategy is to use a message broker, which in addition to providing the decoupling, can also add robustness and scalability. But messaging can be deceptively difficult. Which broker suits your needs best? Should you follow a \"command\" or \"event\" based model? How will you handle duplicates? Can you tolerate message loss? Will you recover from errors by discarding, retrying or dead lettering?</p>",
      "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/1CYrJfCdiEMmO2GqsiQOMc/7ad6800d453f62b42880e4c34ecd8dac/divorcing-microservices-with-rascal-720x540.jpg\" title=\"Divorcing Microservices With Rascal\" alt=\"Hands holding a torn picture of a heart\" />\n\n<p>Microservice based architectures are everywhere, but to succeed you must find ways to decouple your services so they can be developed and deployed in isolation. A popular strategy is to use a message broker, which in addition to providing the decoupling, can also add robustness and scalability. But messaging can be deceptively difficult. Which broker suits your needs best? Should you follow a \"command\" or \"event\" based model? How will you handle duplicates? Can you tolerate message loss? Will you recover from errors by discarding, retrying or dead lettering?</p>\n\n<p>If these questions weren't enough, you have to find a good client library. For RabbitMQ there's the excellent <a href=\"https://github.com/squaremo/amqp.node\">ampqlib</a>, but it's not for the faint of heart. Estabilishing a communication channel with the broker requires serveral api calls, and will not be automatically be restablished if dropped. Messages are not persistent or confirmed by default. Errors are likely to crash your application, and there's no support for clustering.</p>\n\n<p>Enter <a href=\"https://www.github.com/guidesmiths/rascal\">Rascal</a>, a friendly, config driven RabbitMQ client which sits on top of amqplib, simplyfing adoption significantly.</p>",
      "date": "2016-06-29T19:00:00.000Z",
      "event": {
        "id": "Node.js Meetup - Divorcing Microservices With Rascal",
        "text": "Node.js Meetup",
        "url": "https://www.meetup.com/Node-js-Meetup-London/events/231560165/"
      },
      "location": "London",
      "images": {
        "id": "Divorcing Microservices With Rascal",
        "thumbnail": {
          "url": "//images.contentful.com/g99n9a78vx0s/1qT8990i1SqsACkwECicAI/ed05fc680b9409d92d0ebc46ca2b274a/divorcing-microservices-with-rascal-720x540.jpg",
          "title": "Thumbnail of Microservices With Rascal",
          "description": "A picture of a heart, ripped in two"
        }
      },
      "url": "/talks/divorcing-microservices-with-rascal-2"
    },
    "3": {
      "id": 3,
      "title": "Yadda - The Other BDD Library",
      "author": {
        "id": "scresswell",
        "displayName": "Stephen Cresswell",
        "firstName": "Stephen",
        "lastName": "Cresswell",
        "jobTitle": "Moderator",
        "email": "email@stephen-cresswell.net",
        "mobile": "+44 (0)7814 033321"
      },
      "channel": {
        "id": "talks",
        "title": "Talks",
        "link": {
          "id": "Talks",
          "text": "Talks",
          "icon": "fa-microphone",
          "url": "/talks"
        },
        "introImage": {
          "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
          "title": "Dreams vs Reality",
          "description": "Go on go on go on go on go on go on go on"
        },
        "introText": "\"How did that gobshite get on the television?\"",
        "introLink": {
          "id": "Father Ted - Channel 4",
          "text": "Father Ted - Channel 4",
          "url": "http://www.channel4.com/programmes/father-ted"
        }
      },
      "tweetText": "Yadda%20-%20The%20Other%20JavaScript%20Library",
      "keywords": [
        "Node.js",
        "Testing",
        "BDD",
        "Yadda"
      ],
      "summary": "<p>The JavaScript community has got rather confused about BDD. The most popular tools, Jasmine, Mocha, Vows, Chai and Expect are proclaimed as BDD, but they're not. Jasmine, Mocha and Vows, are excellent test frameworks, but from a BDD perspective they merely describe('some test function') with text. Chai and Expect don't even do this, they are fluid assertion apis, which attempt to simulate an ordinary language a.bit.like.this() at the cost of additional ceremony. Surely there's more to BDD…</p>",
      "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/FntIzfFlAGWGOQMcoUCOm/0212b9817bd81ebf80a6726ed1191ffb/yadda-1024x768.jpg\" title=\"Yadda\" alt=\"Man sitting among boxes labelled as JavaScript BDD librarys\" />\n\n<p>The JavaScript community has got rather confused about BDD. The most popular tools, Jasmine, Mocha, Vows, Chai and Expect are proclaimed as BDD, but they're not. Jasmine, Mocha and Vows, are excellent test frameworks, but from a BDD perspective they merely describe('some test function') with text. Chai and Expect don't even do this, they are fluid assertion apis, which attempt to simulate an ordinary language a.bit.like.this().</p>\n\n<p>The only true BDD tool found for JavaScript is CucumberJS. The problem with CucumberJS is that the Gerkin syntax is restrictive. I don't want to be limited to starting my sentences with \"Given\", \"When\", \"Then\", \"And\" and \"But\". I want to express myself naturally.</p>\n\n<p>I also want a test runner that makes good decisions about which steps to run, that works in a browser and that lets me plugin different step libraries so that I can test multiple interfaces (e.g. rest and HTML) with the same scenarios. I even want a tool that has nothing to do with testing and just maps ordinary sentences to functions so I could use it in a rules engine or build script.</p>\n\n<p>That's why I wrote <a href=\\'http://www.github.com/acuminous/yadda\\'>Yadda</a> - the other JavaScript BDD library.</p>",
      "date": "2016-04-26T18:00:00.000Z",
      "event": {
        "id": "Community For Agile Testing - Yadda",
        "text": "Community For Agile Testing",
        "url": "https://www.meetup.com/es-ES/Community-for-Agile-Testing/events/229788565/"
      },
      "location": "London",
      "images": {
        "id": "Yadda - The Other BDD Library",
        "thumbnail": {
          "url": "//images.contentful.com/g99n9a78vx0s/3ipHCk26VGWG8YQiiy4kss/fd1988b7d5aa41f645b96fc9082fad07/yadda-720x540.jpg",
          "title": "Thumbnail of Yadda - The Other BDD Library",
          "description": "Man sitting among boxes labelled chai, jasmine, mocha, vows and cucumber"
        }
      },
      "url": "/talks/yadda-the-other-bdd-library-3"
    },
    "1000": {
      "id": 1000,
      "title": "10½ Factor Microservices",
      "author": {
        "id": "scresswell",
        "displayName": "Stephen Cresswell",
        "firstName": "Stephen",
        "lastName": "Cresswell",
        "jobTitle": "Moderator",
        "email": "email@stephen-cresswell.net",
        "mobile": "+44 (0)7814 033321"
      },
      "channel": {
        "id": "blog",
        "title": "Blog",
        "link": {
          "id": "Blog",
          "text": "Blog",
          "icon": "fa-file-text-o",
          "url": "/blog"
        },
        "introImage": {
          "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
          "title": "Duty Calls",
          "description": "A stick figure refusing to leave his computer and come to bed"
        },
        "introText": "\"Someone is wrong on the internet\"",
        "introLink": {
          "id": "Duty Calls",
          "text": "Duty Calls - xkcd",
          "url": "https://xkcd.com/386/"
        }
      },
      "tweetText": "10%C2%BD%20Factor%20Microservices",
      "keywords": [
        "Node.js",
        "Microservices",
        "12 Factor",
        "Docker"
      ],
      "summary": "<p>\nBy now you've probably heard of the <a href='https://12factor.net'>12 Factor</a> design principles. Overall they are very good. However as with any piece of advice they should be viewed in the context of when they were written, and reassessed in the current content to see to what extent they are still valuable. In the context of Node.js microservices how will the 12 factor principles stack up?\n</p>",
      "body": "<p>\nBy now you've probably heard of the <a href=\"https://12factor.net\">12 Factor</a> design principles. Overall they are very good, but as with any piece of advice they should be viewed in the context of when they were written, and reassessed in the current content to see to what extent they are still valuable.\n</p><p>\nThe context I'm most interested in is that of microservice development,  with Node.js. Node is a great fit for microservces in most situations. The module system is excellent, so it's easy to reuse and share code. Once mastered JavaScript can be terse, yet readable, it's interpreted so doesn't suffer from compilation delays, but thanks to V8 fast enough for the majority of applications. The only time I've found Node problematic is when performing event loop blocking operations or when interacting with a server who's client libraries are of dubious quality. With the scene set, how will the 12 factor principles stack up?\n</p>\n<h2>Codebase (1)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/2sohHw99zqsmuQWqkmCYcw/a7d4ac73cde04f7ce2b04c13b00b2bab/codebase-1024x768.jpg\" title=\"Codebase\" alt=\"A programmer typing on a keyboard\" />\n<p>\nThe first of the principles - \"Codebase\" is also the most easily challenged. The principle states that there should be a 1-1 relationship between codebase and source repository, with consideration for branches and forks etc. \n</p>\n<p>\nI sympathise entirely with what I suspect to be the underlying motivation. I've had to suffer a number of projects with complicated, multi-stage setup, linked repositories (e.g. git sub-modules), shared build scripts and all encompassing development environments which made life a misery. However the glaring problem with this principle is that it prohibits monorepos, where multiple applications are stored in a single repository. Monorepos aren't without their problems - without appropriate tooling it is difficult to know what to build, test and deploy, but have certain advantages such as making it easier to make sweeping changes to the entire codebase.\n</p>\n<h2>Dependencies (2)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/jGfmTiIZEW88GOIMCSU8u/675b86d953174e791fac4f35e85de04a/dependencies-1024x768.jpeg\" title=\"Dependencies\" alt=\"Stars from a baby's mobile\" />\n<p>\nThe second principle, \"Explicitly declare and isolate dependencies\", is more sound. Version and bundle all dependencies with the application, rather than trusting to their correct existence on deployment. Node.js solves this in a similar way to most other modern languages, by including a dependencies manifest. The latest version of Node's package manager automatically creates a lock file, so even transitive dependencies are explicitly versioned, however there are some situations in which even this is not enough.\n</p><p>\nSome node modules have native dependencies, which must be present in the target environment in order to work. Examples are <a href=\"https://github.com/gsmcwhirter/node-zoneinfo\">zoneinfo</a>, <a href=\"https://www.npmjs.com/package/pg-native\">pg-native</a> and <a href=\"https://www.npmjs.com/package/node-expat\">node-expat</a>. To truly conform to this principle, these dependencies should be bundled too, as must Node.js itself, and this is where <a href=\"https://www.docker.com/\">docker</a> comes in.\n</p><p>\nBy deploying your application within a docker container, and by including its dockerfile in your codebase you can not only version the non-native dependencies, but the native ones as well. \n</p><p>\n<h2>Backing Services (4) and Dev/Prod Parity (10)</h2>\n<div class=\"row\">\n<div class=\"col-md-6\">\n<img src=\"https://images.contentful.com/g99n9a78vx0s/5VN3f8hLB6gwgmauwmKKoa/11dfc597c2e980d9bf7375878429a96a/backing-services-1024x768.jpeg\" title=\"Backing Services\" alt=\"A server communicating with database and web service\"/>\n</div>\n<div class=\"col-md-6\">\n<img src=\"https://images.contentful.com/g99n9a78vx0s/3VDwtMdYykG8cki4C2OQ6u/25a707ce6c7e17a05c2b2a22653a4b2c/dev-prod-parity-1024x768.jpg\" title=\"Dev/Prod Parity\" alt=\"Two nearly identical robots\" />\n</div>\n</div>\nWhile we're on the subject of docker and containerisation, we may as well tick off the forth (backing services), and tenth (dev/prod parity) principles. The backing services principle states that external services (databases, message brokers, other web services, etc) should be treated as \"attached resources\", which can be substituded without having to rebuild and redeploy the application. \n</p><p>\nThis is achievable through external configuration, but made even easier by the service discovery provided by docker, and related technologies such as <a href=\"https://kubernetes.io\">Kubernetes</a>. Kubernetes even comes with a <a href=\"https://kubernetes.io/docs/admin/kube-proxy/\">proxy</a> which enables you to attach a locally running application to a kubernetes managed backing service transparently.\n</p>\n<p>\nBy deploying services within containers, you get a high degree of dev/prod parity, and even more if you deploy databases and message brokers within containers too. Despite this I tend to only do this locally and on CI for serious applications as I've encountered more than my share of issues with mounting network attached storage into docker containers, especially when managed by Kubernetes.\n</p>\n<h2>Config (3)</h2>\n<p>\nUnfortunately the 3rd principle of storing configuration (only) in the environment isn't as well thought out. The 12 factor principles argue that\n</p>\n<ol>\n  <li>against named environments because you will run out of meaningful names</li>\n  <li>for limiting configuration to environment variables, since files can be scattered, inconsistent and may accidentally be checked into source control</li>\n</ol>\n<p>\nMy counter to argument 1, is that in every organisation I've ever worked as, people always refer to environments by name, and so having a named environment configuration makes life significantly easier.\n</p><p>\nMy problem with argument 2, is that I specifically want to check config (excluding secrets) into source control. This enables it to be versioned and deployed with the application, for the same reasons behind the principle of dependency management. Furthermore environment variables lack native structure and typing and cannot be changed at runtime. They are also the <a href=\"https://www.theregister.co.uk/2017/08/02/typosquatting_npm/\">easiest configuration to steal</a>.\n</p><p>\nInstead my approach is to use whatever config source makes most sense (which can include environment variables). I <a href=\"https://github.com/cressie176/www-app/tree/master/server/config\">version control a default config file, and environmental overrides</a> with the application source, then further override with secrets at deploy or runtime using an appropriate secrets management tool such as <a href=\"https://github.com/StackExchange/blackbox\">blackbox</a>, <a href=\"https://www.vaultproject.io/\">vault</a> or <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Kubernetes</a>. I use <a href=\"https://www.npmjs.com/package/confabulous\">Confabulous</a>, a library of my own creation similar to <a href=\"https://www.npmjs.com/package/nconf\">nconf</a>, to handle the merging and overrides.\n</p>\n<h2>Build, Release, Run (5), Processes (6) and Port Binding (7)</h2>\n<p>\nThe next 3 principles aren't very interesting. Separating Build, Release, Run (principle 5) is trivial with docker...\n</p>\n<ul>\n<li>Build and image from a clean checkout</li>\n<li>Push to a repository</li>\n<li>Run on a remote server</li>\n</ul>\n<p>\nI prefer a self managed CI server such as <a href=\"https://jenkins.io/\">Jenkins</a> for building images and orchestrating deployments. With your own server you can preinstall build dependencies, cache images and have fewer security concerns. As a result, some of our microservices build, test and deploy in under 20 seconds.\n</p>\n<p>\nPrinciple 6, stateless processes just boils down to using a database rather than memory to persist any data which spans a request, and Principle 7, port binding means your application should start it's own server rather than be deployed into an application server. Popular in the Java world, but not in Nodeland.\n</p>\n<h2>Concurrency (8) and Admin Processes (12)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/493at3Zgc0smAquIsIA8uC/e240f820a8f659877b7acd75b3b39bcb/concurrency-1024x768.jpg\" title=\"Concurrency\" alt=\"A graph showing process instances by worker diversity\" />\n<p>\nPrinciple 8, concurrency is highly relevant in a Node.js and microservice environment. This principle advocates scaling by distributing functionality to worker processes, whos instances may grow and shrink depending on demand. i.e. microservices 101. I've also found this a useful approach for circumventing one of Node's limitations. If you have an node process which by necessity performs some long running synchronous operation (e.g. parsing a large XML file), then it will block all other tasks. By separating the synchronous and asynchronous behaviour into different services, you bypass the problem.\n</p><p>\nWe take the same approach for admin processes (principle 12). They either exist as a temporary service, launching from their own docker container and running to completion, or they lie dormant in another permanently running service and can be triggered either by http request or message.\n</p>\n\n<h2>Disposability (9)</h2>\n<img src=\"https:////images.contentful.com/g99n9a78vx0s/5UBtNZVk6kSGeQ0IWm6Cwc/e03218aed927f0b59df6a34c28c08e1c/disposability-1024x768.jpg\" title=\"Disposability\" alt=\"A waste paper basket\"/>\n<p>\nPrinciple 9, disposability is also interesting, and often under appreciated. The principle states that applications should startup and shutdown quickly and gracefully. By gracefully I mean that applications should not attempt to perform any work until all necessary resources (databases connections etc) have been established. When receiving a shutdown signal the application should stop accepting new work, but wait for inflight tasks to complete and only then close connections to attached resources. \n</p><p>\nDepending on your number of microservices, and variety of backing services, this can be surprisingly difficult to orchestrate in a consistent way. My esteemed comrade <a href=\"https://github.com/BorePlusPlus\">Dalibor Novak</a> worked with me creating <a href=\"https://www.npmjs.com/package/systemic\">systemic</a> for solving this problem. You can see it in action <a href=\"https://github.com/cressie176/www-app/tree/master/server/lib\">here</a>\n</p>\n<h2>Logs (11)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/4KUiWSfUasommuGiO0E2mi/9b648e38d75e13f6e6055a27148e990d/logs-1024x768.jpeg\" title=\"Logs\" alt=\"Logs being transported down a river\"/>\n<p>\nThe remaining principle is to treat logs as event streams. The advice is to write logs, unbuffered to stdout, then route these to dedicated logging infrastructure. I agree, but think they missed a trick. Rather than writing directly to console or your logging framework of choice your application should also emit log messages as events. By doing so each message can have multiple consumers, which may include one which writes to the console, but could additionally include one which publishes events to a message bus or monitoring system such as <a href=\"https://prometheus.io/\">Prometheus</a>. As an added bonus it becomes trivial to selectively silence are asset logged events in automated tests. Node has excellent support for <a href=\"https://nodejs.org/api/events.html\">events</a>, but using it for logging would be rather unusual. For this reason (and others) I've wrapped the event emitter behind a loglike api in a library called <a href=\"https://www.npmjs.com/search?q=prepper\">prepper</a>. You can connect it to console, bunyan or any other logging framework to get the benefits given above while retaining your logger choice.\n\nThe remaining principle is to treat logs as event streams. The advice is to write logs, unbuffered to stdout, then route these to dedicated logging infrastructure. I agree, but think they missed a trick. Rather than writing directly to stdout or your logging framework of choice your application should emit log messages as internal events. By doing so each message can have multiple consumers, which may include one which writes to stdout, but could additionally include one which publishes events to a message bus or monitoring system such as <a href=\"https://prometheus.io/\">Prometheus</a>. As an added bonus it becomes trivial to selectively silence or assert logged events in automated tests. Node has excellent support for <a href=\"https://nodejs.org/api/events.html\">events</a>, but using it for logging would be rather unusual. For this reason (and others) I've wrapped the event emitter behind a loglike API in a library called <a href=\"https://www.npmjs.com/search?q=prepper\">prepper</a>. You can connect it to console, bunyan or any other logging framework to get the benefits given above while retaining your logger of choice.\n\n</p>\n<h2>In Conclusion...</h2>\n<p>\nOf all the 12 factor principles, the only one I fully disagree with is that of config (-1). The codebase principle is still valid in spirit, even if the concerns about the relationship between source code and repository has  dated (-½). Given the extent to which Node.js, Microservices and containerisation have revolutionised how we design, write and deploy code. 10½ out of 12 is pretty good.\n</p>\n\n\n\n\n\n\n\n\n",
      "date": "2017-08-12T20:00:00.000Z",
      "images": {
        "id": "10½ Factor Microservices With Node.js",
        "thumbnail": {
          "url": "//images.contentful.com/g99n9a78vx0s/3aMxdRlFxuggOWEqeIYm6i/53409a51c6e8a38616576e3cbae97b9f/ten-and-a-half-factor-720x540.jpg",
          "title": "Thumbnail of a 12 Sided  Dice",
          "description": "A 12 sided dice showing 10½"
        }
      },
      "url": "/blog/10-factor-microservices-1000"
    },
    "1001": {
      "id": 1001,
      "title": "When Orange Is Not The New Black",
      "author": {
        "id": "scresswell",
        "displayName": "Stephen Cresswell",
        "firstName": "Stephen",
        "lastName": "Cresswell",
        "jobTitle": "Moderator",
        "email": "email@stephen-cresswell.net",
        "mobile": "+44 (0)7814 033321"
      },
      "channel": {
        "id": "blog",
        "title": "Blog",
        "link": {
          "id": "Blog",
          "text": "Blog",
          "icon": "fa-file-text-o",
          "url": "/blog"
        },
        "introImage": {
          "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
          "title": "Duty Calls",
          "description": "A stick figure refusing to leave his computer and come to bed"
        },
        "introText": "\"Someone is wrong on the internet\"",
        "introLink": {
          "id": "Duty Calls",
          "text": "Duty Calls - xkcd",
          "url": "https://xkcd.com/386/"
        }
      },
      "tweetText": "When%20Orange%20Isn't%20The%20New%20Black",
      "keywords": [
        "Node.js",
        "Software",
        "JavaScript"
      ],
      "summary": "<p>\nFrameworks come and go so quickly that with some notable exceptions any libraries you depend on today, could be superseded tomorrow. There's a cost to adoption, but often a larger cost to migrate away. Jump on the band wagon too soon and you get the pain while a project is unstable, leave it too late and supporting community may already moving on.\n</p>\n<p>\nHow do you tell when orange really is the new black, rather than being the emperors new clothes?\n</p>",
      "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/8deT28SVQ4IqIcW8cI0i8/e6f3ef6fcf6f9bf92caa091ad13e0779/orange-is-the-new-black-1024x414.jpg\" title=\"Orange Is Not The New Black\" alt=\"Orange Is Not The New Black\" />\n<p>\nThe pace of software development is faster than ever before. Languages, libraries and applications emerge for their 15 minutes of fame, before being relegated to the C-List just as quickly. But at what cost?\n</p>\n<p>\nI remember when I first discovered open source. Adding a new library to a software project felt like adding value, with the added bonus that it was code I didn't have to write, test or maintain. But was there always a significant and worthwhile benefit?\n</p>\n<p>\nI remember a colleage complaining about the Spring framework, and that it was too much for him to learn. At a time when the most popular alternatives were <a href=\"https://struts.apache.org/\">Struts<a>, <a href=\"http://tapestry.apache.org/\">Tapestry</a>, <a href=\"http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html\">JSF</a> and his preferred option of vanilla <a href=\"https://docs.oracle.com/cd/E17904_01/web.1111/e13712/basics.htm\">Servlets and JSP</a> I didn't have much sympathy for him. Why should his reluctance to pick up new technology limit everyone elses productivity? Surely learning new tools is a key part of of the job?\n</p>\n<p>\nNow I often find myself facing a similar situation, but from the other site of the argument. I'm no ludite. I was an early adopter of docker, with a <a href=\"https://github.com/moby/moby/commit/fe727e2a87fa086d728664c396fd44f4be6d6afd\">commit</a> from 2013 to prove it. I have maintain several moderately popular Node.js packages, and spent the last year writing in Go. Despite frontend devleopment not being a core part of my job, I am comfortable enough with React to build websites like this one. So what's the problem?\n</p>\n<p>\nThe first problem is that frameworks come and go so quickly that with some noteable exceptions any libraries you depend on today, could be superseeded tomorrow. There's a cost to adoption, but often a larger cost to migrate away. Jump on the band wagon too soon and you get the pain while a project is unstable, leave it too late and supporting community may already moving on. \n</p>\n<p>\nThe second problem is that the new library or tool is either poorly designed or doesn't bring enough value to justitfy the cost, but that the developers introducing haven't been bitten enough times in the past to be wary.\n</p>\n<p>\nLet's consider three examples, <a href=\"https://www.npmjs.com/package/hapi\">hapi</a>, <a href=\"https://www.npmjs.com/package/yarn\">yarn</a> and <a href=\"https://www.npmjs.com/package/jest\">jests</a>. I have deliberately picked both these libraries because they are from large organisations, have a significant user base and received a lot of positive publicitly. Several teams I work with have moved, or are considering moving to them.\n</p>\n<p>\nMy preferred http server has always been <a href=\"https://www.npmjs.com/package/express\">express</a>, for the simple reason that it doesn't try to be in charge. Provided my handlers conform to a few trivial middleware conventions I'm good. A few years ago I was leading a team that wanted to move to <a href=\"https://www.npmjs.com/package/hapi\">hapi</a>. A pair of developers evaluated it, recommended it and so we started using it in all new services. It was a huge mistake. Hapi takes the opposite approach to express. It wants to be boss, exerting a strong influencing over how your code and tests are written. Discontent with hapi grew over the the next few months and the team switched back to express. Four years on there are still a handful of hapi services running that nobody wants to touch.\n</p>\n<p>\nWhen yarn was released it was well received. It was faster than npm and did a better job of locking transitive dependencies. With the release of npm 5 most of yarn's advantages have been negated. In order to support yarn, the organisation I work for had to make code changes to their build pipeline. At least some of those same teams are now considering moving back.\n</p>\n<p>\nThe new unit testing framework on the block is <a href=\"https://www.npmjs.com/package/jest\">Jest</a>. There are a whole series of blog posts from organisations who have successfully migrated from mocha to jest and report reaping the benefits. When I look at Jest I see everything I want to avoid in a unit test framework.\n</p>\n\n<ul>\n  <li>It wants to run your tests for you rather than making programmatic invocation a first class citizen, putting you at the mercy of its file globbing.</li>\n  <li>It uses a global \"expect\" function which doesn't differtiate whether it's being called from a previously executed test or the current one, resulting in difficult to diagnose failures.</li>\n  <li>It uses a fluid assertion api, leading to tests that are higher in ceromony, lower in essence.</li>\n  <li>Through its support for mocking it encourages testing interactions rather than side effects, which results in brittle and opaque test.</li>\n  <li>Through its support for snapshots it encourages brittle, whole document comparision tests</li>\n</ul>\n<p>\nThe irony of my last example is that I use jest for testing this site. Since it is configured by default with <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>. While not reported in those same blog posts I had plenty of teething problems with Jest, from it.only still isn't working reliably and configuration has been neutered. Despite my reservations I've decided to stick with it. Given the support I'm sure these teething problems will get resolved and the react eco-system is sufficiently complex for me to want to stay on-piste as it were. I have a suspision that it's support for parallel testing will be worth the trouble, and if other teams are going to be adopting it, I might as well get on the band wagon.\n</p>\n<p>\nSo how do you tell when orange really is the new black, rather than being a case of the emperors new clothes? The answer is to be suspicious of any library that:\n</p>\n<ul>\n  <li>has a steep and/or prolonged learning curve</li>\n  <li>is accompanied by an unusual amount of hype</li>  \n  <li>significantly changes the design of your appliation</li>\n  <li>is accompanied by its own testing tools (a well designed library shouldn't need one)</li>\n  <li>wants to \"start\" your application</li>\n  <li>is primarily used for lily gilding</li>\n  <li>has poor documentation and who's issues go unanswered</li>  \n</ul>\n</p>\n<p>\nThat is unless the library in question written by me. In which case you should definitely use it without thinking twice.\n</p>\n",
      "date": "2017-08-19T18:00:00.000Z",
      "images": {
        "id": "Orange Is Not The New Black",
        "thumbnail": {
          "url": "//images.contentful.com/g99n9a78vx0s/4J3pfkFcTYQq8giGaCwSC8/7953f2c1dd967032cab1aa26b1c91bd3/orange-is-the-new-black-720x540.jpg",
          "title": "Thumbnail of Orange Is Not The New Black",
          "description": "Orange Is Not The New Black "
        }
      },
      "url": "/blog/when-orange-is-not-the-new-black-1001"
    },
    "1002": {
      "id": 1002,
      "title": "Await - I'll See You In JavaScript Hell!",
      "author": {
        "id": "scresswell",
        "displayName": "Stephen Cresswell",
        "firstName": "Stephen",
        "lastName": "Cresswell",
        "jobTitle": "Moderator",
        "email": "email@stephen-cresswell.net",
        "mobile": "+44 (0)7814 033321"
      },
      "channel": {
        "id": "blog",
        "title": "Blog",
        "link": {
          "id": "Blog",
          "text": "Blog",
          "icon": "fa-file-text-o",
          "url": "/blog"
        },
        "introImage": {
          "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
          "title": "Duty Calls",
          "description": "A stick figure refusing to leave his computer and come to bed"
        },
        "introText": "\"Someone is wrong on the internet\"",
        "introLink": {
          "id": "Duty Calls",
          "text": "Duty Calls - xkcd",
          "url": "https://xkcd.com/386/"
        }
      },
      "tweetText": "Await%20-%20I'll%20See%20You%20In%20JavaScript%20Hell!",
      "keywords": [
        "Node.js",
        "JavaScript",
        "Promises",
        "Callback",
        "Await",
        "Software Craftsmanship"
      ],
      "summary": "<p>\nThe JavaScript callback vs promises debate is mostly over. Promises won, albeit by the back door of await. I for one welcome our new asynchronous overlords, but before we rush to our new programming nirvana let's take some time to look at the fallacy of promises and why they didn't save our codebases from nested damnation…\n</p>",
      "body": "<p>\nThe JavaScript callback vs promises debate is mostly over. Promises won, albeit by the back door of await. I for one welcome our new asynchronous overlords, but before we rush to our new programming nirvana let's take some time to look at the fallacy of promises and why they didn't save our codebases from nested damnation. The following is some code which could justifiably be accused of callback hell.\n\n<code>function welcomeToHell(cb) {\n  foo(err => {\n    if (err) return cb(err)\n    bar(err => {\n      if (err) return cb(err)\n      baz(err => {\n        if (err) return cb(err)\n        cb()\n      })\n    })\n  })\n}\n</code>\n<p>\nThe only reason the callback based code might look like this, is because its author did a shoddy job. By using a library like <a href=\"https://www.npmjs.com/package/async\">async</a> things can be much improved. That aside, if the code had been written with promises it might look as follows become…\n</p>\n<code>function salvationIsHere() {\n  return Promise.resolve()\n    .then(foo)\n    .then(bar)\n    .then(baz)\n}\n</code>\n<p>\nIf all promises code ever written looked like the example above I would stop now. It doesn't. Promises are simple when code follows a linear sequence or can run in parallel, but when you add conditions or iteration, just like with callbacks it become harder to keep them simple. As a result most of the promise based code I come across looks nothing like the above. Instead it looks like this…\n</p>\n<code>function welcomeBackToHell(email) {\n  return getUserByEmail(email)\n    .then(user => getUserRoles(user.id)\n      .then(roles => {\n        if (roles.indexOf('publisher') < 0) return { user, roles }\n        return getUserArticles(user.id)\n          .then(articles => ({ user, roles, articles }))\n      })\n  )\n}\n</code>\n<p>\nAll we've done is traded callback hell for promise hell. Now my point isn't that with appropriate care promisified code can't read well. <em>It can</em>. But this is equally true with <a href=\"https://github.com/cressie176/www-app/blob/master/server/lib/components/cms/cms.js\">callbacks</a>, providing you take the time to write functions that:\n</p>\n<ol>\n  <li>Have meaningful names</li>\n  <li>Are small (I aim for &lt;=4 lines)</li>\n  <li>Do one thing well</li>\n  <li>Have a single level of abstraction</li>\n  <li>Minimise parameters (I aim for &lt;= 2 excluding cb)</li>\n  <li>Avoid booleans</li>\n  <li>Minimise conditional logic (guard conditions permitted)</li>  \n</ol>\n<p>\nand modules that:\n</p>\n<ol>\n  <li>Have meaningful names</li>\n  <li>Have a single responsibility</li>\n  <li>Encapsulate data and behaviour</li>\n</ol>\n<p>\nTo write coherent and cohesive code you have to understand and care about the principles of software craftsmanship. This is thousands of times more important than whether you use callbacks, promises or await. We seem to have forgotten, but lets try to remember before we damn ourselves to another level of asynchronous hell with await.\n</p>",
      "date": "2017-08-26T18:00:00.000Z",
      "images": {
        "id": "Await - I'll See You In Hell",
        "thumbnail": {
          "url": "//images.contentful.com/g99n9a78vx0s/Ayv9uj9UyWu6oOge8sYMo/0468e8bccf21a0062f02d2826ed1c43e/pinhead-720x540.jpg",
          "title": "Thubmnail of Pinhead",
          "description": "Pinhead from the Hellraiser franchise"
        }
      },
      "url": "/blog/await-ill-see-you-in-javascript-hell-1002"
    }
  },
  "site": {
    "id": "www.stephen-cresswell.net",
    "title": "www.stephen-cresswell.net",
    "navigation": {
      "id": "navigation",
      "title": "Navigation",
      "links": [
        {
          "id": "Home",
          "text": "Home",
          "icon": "fa-home",
          "url": "/"
        },
        {
          "id": "Blog",
          "text": "Blog",
          "icon": "fa-file-text-o",
          "url": "/blog"
        },
        {
          "id": "Talks",
          "text": "Talks",
          "icon": "fa-microphone",
          "url": "/talks"
        }
      ]
    },
    "spotlights": [
      {
        "id": "contact",
        "title": "Contact",
        "links": [
          {
            "id": "Email",
            "text": "hello@stephen-cresswell.net",
            "icon": "fa-envelope",
            "url": "mailto:hello@stephen-cresswell.net"
          },
          {
            "id": "Mobile",
            "text": "+44 (0)7814033321",
            "icon": "fa-phone",
            "url": "tel:+447814033321"
          }
        ]
      },
      {
        "id": "legal",
        "title": "Legal",
        "links": [
          {
            "id": "Terms & Conditions",
            "text": "Terms & Conditions",
            "url": "/legal/terms-and-conditions"
          },
          {
            "id": "Privacy Policy",
            "text": "Privacy Policy",
            "url": "/legal/privacy-policy"
          }
        ]
      },
      {
        "id": "social",
        "title": "Social Networks",
        "links": [
          {
            "id": "GitHub",
            "icon": "fa-github",
            "url": "https://www.github.com/cressie176/"
          },
          {
            "id": "Linkedin",
            "icon": "fa-linkedin",
            "url": "https://www.linkedin.com/in/stephencresswell/"
          },
          {
            "id": "Twitter",
            "icon": "fa-twitter",
            "url": "https://www.twitter.com/cressie176"
          }
        ]
      }
    ],
    "copyright": {
      "id": "© 2017 Stephen Cresswell. All rights reserved.",
      "year": 2017,
      "owner": "Stephen Cresswell",
      "rights": "All rights reserved."
    }
  },
  "featured": {
    "talks": {
      "id": "talks",
      "title": "Upcoming & Recent Talks",
      "icon": "fa-microphone",
      "items": [
        {
          "id": 1,
          "title": "Enterprise Grade Microservices",
          "author": {
            "id": "scresswell",
            "displayName": "Stephen Cresswell",
            "firstName": "Stephen",
            "lastName": "Cresswell",
            "jobTitle": "Moderator",
            "email": "email@stephen-cresswell.net",
            "mobile": "+44 (0)7814 033321"
          },
          "channel": {
            "id": "talks",
            "title": "Talks",
            "link": {
              "id": "Talks",
              "text": "Talks",
              "icon": "fa-microphone",
              "url": "/talks"
            },
            "introImage": {
              "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
              "title": "Dreams vs Reality",
              "description": "Go on go on go on go on go on go on go on"
            },
            "introText": "\"How did that gobshite get on the television?\"",
            "introLink": {
              "id": "Father Ted - Channel 4",
              "text": "Father Ted - Channel 4",
              "url": "http://www.channel4.com/programmes/father-ted"
            }
          },
          "tweetText": "Enterprise%20Grade%20Microservices",
          "keywords": [
            "Node.js",
            "12 Factor",
            "Microservices"
          ],
          "summary": "<p>Microservice adoption is driven by promises of simplicity, flexibility, resilience and productivity. It liberates developers from clunky frameworks and legacy technology, enabling them to release faster and more frequently than ever before. With an effective deployment pipeline it is possible to have a new microservice running in production and delivering value within 15 minutes, and to achieve 20+ production releases a day…</p>",
          "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/4pBKNjkDzaoiYqsScA6aQ2/2adc227a96754741c608e4c1ec9757fb/enterprise-grade-microservices-720x540.jpg\" title=\"Enterprise Grade Microservices\" alt=\"Businessman standing by the window in an office tower\" />\n<p>Microservice adoption is driven by promises of simplicity, flexibility, resilience and productivity. It liberates developers from clunky frameworks and legacy technology, enabling them to release faster and more frequently than ever before. With an effective deployment pipeline it is possible to have a new microservice running in production and delivering value within 15 minutes, and to achieve 20+ production releases a day.</p>\n\n<p>But the fast pace, technological freedom and segregated codebase is not without cost. The maxim that a microservice codebase doesn't matter because it's small, won't change and is easily replaced is more often false than it is true.</p>\n\n<p>The principles behind clean code and 12 factor apps are just as applicable to microservices as they are to monoliths, but are all too easily ignored in the typical hubbub and hype that surrounds microservice adoption.</p>",
          "date": "2016-11-23T19:00:00.000Z",
          "event": {
            "id": "Corp.js - Enterprise Grade Microservices",
            "text": "Corp.js",
            "url": "https://www.meetup.com/Corporate-JavaScript-Meetup-Budapest/"
          },
          "location": "Budapest",
          "images": {
            "id": "Enterprise Grade Microservices",
            "thumbnail": {
              "url": "//images.contentful.com/g99n9a78vx0s/3rAYG3rbaEI6Ka4SwigAuA/a0c40e3e2e6113fcdbf3323775f35665/enterprise-grade-microservices-720x540.jpg",
              "title": "Thumbnail of Enterprise Grade Microservices",
              "description": "Businessman standing by a window in a skyscraper"
            }
          },
          "url": "/talks/enterprise-grade-microservices-1"
        },
        {
          "id": 2,
          "title": "Divorcing Microservices With Rascal",
          "author": {
            "id": "scresswell",
            "displayName": "Stephen Cresswell",
            "firstName": "Stephen",
            "lastName": "Cresswell",
            "jobTitle": "Moderator",
            "email": "email@stephen-cresswell.net",
            "mobile": "+44 (0)7814 033321"
          },
          "channel": {
            "id": "talks",
            "title": "Talks",
            "link": {
              "id": "Talks",
              "text": "Talks",
              "icon": "fa-microphone",
              "url": "/talks"
            },
            "introImage": {
              "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
              "title": "Dreams vs Reality",
              "description": "Go on go on go on go on go on go on go on"
            },
            "introText": "\"How did that gobshite get on the television?\"",
            "introLink": {
              "id": "Father Ted - Channel 4",
              "text": "Father Ted - Channel 4",
              "url": "http://www.channel4.com/programmes/father-ted"
            }
          },
          "tweetText": "Divorcing%20Microservices%20With%20Rascal",
          "keywords": [
            "Node.js",
            "Rascal",
            "RabbitMQ",
            "Microservices"
          ],
          "summary": "<p>Microservice based architectures are everywhere, but to succeed you must find ways to decouple your services so they can be developed and deployed in isolation. A popular strategy is to use a message broker, which in addition to providing the decoupling, can also add robustness and scalability. But messaging can be deceptively difficult. Which broker suits your needs best? Should you follow a \"command\" or \"event\" based model? How will you handle duplicates? Can you tolerate message loss? Will you recover from errors by discarding, retrying or dead lettering?</p>",
          "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/1CYrJfCdiEMmO2GqsiQOMc/7ad6800d453f62b42880e4c34ecd8dac/divorcing-microservices-with-rascal-720x540.jpg\" title=\"Divorcing Microservices With Rascal\" alt=\"Hands holding a torn picture of a heart\" />\n\n<p>Microservice based architectures are everywhere, but to succeed you must find ways to decouple your services so they can be developed and deployed in isolation. A popular strategy is to use a message broker, which in addition to providing the decoupling, can also add robustness and scalability. But messaging can be deceptively difficult. Which broker suits your needs best? Should you follow a \"command\" or \"event\" based model? How will you handle duplicates? Can you tolerate message loss? Will you recover from errors by discarding, retrying or dead lettering?</p>\n\n<p>If these questions weren't enough, you have to find a good client library. For RabbitMQ there's the excellent <a href=\"https://github.com/squaremo/amqp.node\">ampqlib</a>, but it's not for the faint of heart. Estabilishing a communication channel with the broker requires serveral api calls, and will not be automatically be restablished if dropped. Messages are not persistent or confirmed by default. Errors are likely to crash your application, and there's no support for clustering.</p>\n\n<p>Enter <a href=\"https://www.github.com/guidesmiths/rascal\">Rascal</a>, a friendly, config driven RabbitMQ client which sits on top of amqplib, simplyfing adoption significantly.</p>",
          "date": "2016-06-29T19:00:00.000Z",
          "event": {
            "id": "Node.js Meetup - Divorcing Microservices With Rascal",
            "text": "Node.js Meetup",
            "url": "https://www.meetup.com/Node-js-Meetup-London/events/231560165/"
          },
          "location": "London",
          "images": {
            "id": "Divorcing Microservices With Rascal",
            "thumbnail": {
              "url": "//images.contentful.com/g99n9a78vx0s/1qT8990i1SqsACkwECicAI/ed05fc680b9409d92d0ebc46ca2b274a/divorcing-microservices-with-rascal-720x540.jpg",
              "title": "Thumbnail of Microservices With Rascal",
              "description": "A picture of a heart, ripped in two"
            }
          },
          "url": "/talks/divorcing-microservices-with-rascal-2"
        },
        {
          "id": 3,
          "title": "Yadda - The Other BDD Library",
          "author": {
            "id": "scresswell",
            "displayName": "Stephen Cresswell",
            "firstName": "Stephen",
            "lastName": "Cresswell",
            "jobTitle": "Moderator",
            "email": "email@stephen-cresswell.net",
            "mobile": "+44 (0)7814 033321"
          },
          "channel": {
            "id": "talks",
            "title": "Talks",
            "link": {
              "id": "Talks",
              "text": "Talks",
              "icon": "fa-microphone",
              "url": "/talks"
            },
            "introImage": {
              "url": "//images.contentful.com/g99n9a78vx0s/2GQFdGSiTCsiOOCcwu6Yge/d9d27a8b4a74fcea68621d984de6da2b/dreams-reality-200x220.jpg",
              "title": "Dreams vs Reality",
              "description": "Go on go on go on go on go on go on go on"
            },
            "introText": "\"How did that gobshite get on the television?\"",
            "introLink": {
              "id": "Father Ted - Channel 4",
              "text": "Father Ted - Channel 4",
              "url": "http://www.channel4.com/programmes/father-ted"
            }
          },
          "tweetText": "Yadda%20-%20The%20Other%20JavaScript%20Library",
          "keywords": [
            "Node.js",
            "Testing",
            "BDD",
            "Yadda"
          ],
          "summary": "<p>The JavaScript community has got rather confused about BDD. The most popular tools, Jasmine, Mocha, Vows, Chai and Expect are proclaimed as BDD, but they're not. Jasmine, Mocha and Vows, are excellent test frameworks, but from a BDD perspective they merely describe('some test function') with text. Chai and Expect don't even do this, they are fluid assertion apis, which attempt to simulate an ordinary language a.bit.like.this() at the cost of additional ceremony. Surely there's more to BDD…</p>",
          "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/FntIzfFlAGWGOQMcoUCOm/0212b9817bd81ebf80a6726ed1191ffb/yadda-1024x768.jpg\" title=\"Yadda\" alt=\"Man sitting among boxes labelled as JavaScript BDD librarys\" />\n\n<p>The JavaScript community has got rather confused about BDD. The most popular tools, Jasmine, Mocha, Vows, Chai and Expect are proclaimed as BDD, but they're not. Jasmine, Mocha and Vows, are excellent test frameworks, but from a BDD perspective they merely describe('some test function') with text. Chai and Expect don't even do this, they are fluid assertion apis, which attempt to simulate an ordinary language a.bit.like.this().</p>\n\n<p>The only true BDD tool found for JavaScript is CucumberJS. The problem with CucumberJS is that the Gerkin syntax is restrictive. I don't want to be limited to starting my sentences with \"Given\", \"When\", \"Then\", \"And\" and \"But\". I want to express myself naturally.</p>\n\n<p>I also want a test runner that makes good decisions about which steps to run, that works in a browser and that lets me plugin different step libraries so that I can test multiple interfaces (e.g. rest and HTML) with the same scenarios. I even want a tool that has nothing to do with testing and just maps ordinary sentences to functions so I could use it in a rules engine or build script.</p>\n\n<p>That's why I wrote <a href=\\'http://www.github.com/acuminous/yadda\\'>Yadda</a> - the other JavaScript BDD library.</p>",
          "date": "2016-04-26T18:00:00.000Z",
          "event": {
            "id": "Community For Agile Testing - Yadda",
            "text": "Community For Agile Testing",
            "url": "https://www.meetup.com/es-ES/Community-for-Agile-Testing/events/229788565/"
          },
          "location": "London",
          "images": {
            "id": "Yadda - The Other BDD Library",
            "thumbnail": {
              "url": "//images.contentful.com/g99n9a78vx0s/3ipHCk26VGWG8YQiiy4kss/fd1988b7d5aa41f645b96fc9082fad07/yadda-720x540.jpg",
              "title": "Thumbnail of Yadda - The Other BDD Library",
              "description": "Man sitting among boxes labelled chai, jasmine, mocha, vows and cucumber"
            }
          },
          "url": "/talks/yadda-the-other-bdd-library-3"
        }
      ],
      "link": {
        "id": "See all talks…",
        "text": "See all talks…",
        "url": "/talks"
      }
    },
    "articles": {
      "id": "articles",
      "title": "Featured Articles",
      "icon": "fa-file-text-o",
      "items": [
        {
          "id": 1002,
          "title": "Await - I'll See You In JavaScript Hell!",
          "author": {
            "id": "scresswell",
            "displayName": "Stephen Cresswell",
            "firstName": "Stephen",
            "lastName": "Cresswell",
            "jobTitle": "Moderator",
            "email": "email@stephen-cresswell.net",
            "mobile": "+44 (0)7814 033321"
          },
          "channel": {
            "id": "blog",
            "title": "Blog",
            "link": {
              "id": "Blog",
              "text": "Blog",
              "icon": "fa-file-text-o",
              "url": "/blog"
            },
            "introImage": {
              "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
              "title": "Duty Calls",
              "description": "A stick figure refusing to leave his computer and come to bed"
            },
            "introText": "\"Someone is wrong on the internet\"",
            "introLink": {
              "id": "Duty Calls",
              "text": "Duty Calls - xkcd",
              "url": "https://xkcd.com/386/"
            }
          },
          "tweetText": "Await%20-%20I'll%20See%20You%20In%20JavaScript%20Hell!",
          "keywords": [
            "Node.js",
            "JavaScript",
            "Promises",
            "Callback",
            "Await",
            "Software Craftsmanship"
          ],
          "summary": "<p>\nThe JavaScript callback vs promises debate is mostly over. Promises won, albeit by the back door of await. I for one welcome our new asynchronous overlords, but before we rush to our new programming nirvana let's take some time to look at the fallacy of promises and why they didn't save our codebases from nested damnation…\n</p>",
          "body": "<p>\nThe JavaScript callback vs promises debate is mostly over. Promises won, albeit by the back door of await. I for one welcome our new asynchronous overlords, but before we rush to our new programming nirvana let's take some time to look at the fallacy of promises and why they didn't save our codebases from nested damnation. The following is some code which could justifiably be accused of callback hell.\n\n<code>function welcomeToHell(cb) {\n  foo(err => {\n    if (err) return cb(err)\n    bar(err => {\n      if (err) return cb(err)\n      baz(err => {\n        if (err) return cb(err)\n        cb()\n      })\n    })\n  })\n}\n</code>\n<p>\nThe only reason the callback based code might look like this, is because its author did a shoddy job. By using a library like <a href=\"https://www.npmjs.com/package/async\">async</a> things can be much improved. That aside, if the code had been written with promises it might look as follows become…\n</p>\n<code>function salvationIsHere() {\n  return Promise.resolve()\n    .then(foo)\n    .then(bar)\n    .then(baz)\n}\n</code>\n<p>\nIf all promises code ever written looked like the example above I would stop now. It doesn't. Promises are simple when code follows a linear sequence or can run in parallel, but when you add conditions or iteration, just like with callbacks it become harder to keep them simple. As a result most of the promise based code I come across looks nothing like the above. Instead it looks like this…\n</p>\n<code>function welcomeBackToHell(email) {\n  return getUserByEmail(email)\n    .then(user => getUserRoles(user.id)\n      .then(roles => {\n        if (roles.indexOf('publisher') < 0) return { user, roles }\n        return getUserArticles(user.id)\n          .then(articles => ({ user, roles, articles }))\n      })\n  )\n}\n</code>\n<p>\nAll we've done is traded callback hell for promise hell. Now my point isn't that with appropriate care promisified code can't read well. <em>It can</em>. But this is equally true with <a href=\"https://github.com/cressie176/www-app/blob/master/server/lib/components/cms/cms.js\">callbacks</a>, providing you take the time to write functions that:\n</p>\n<ol>\n  <li>Have meaningful names</li>\n  <li>Are small (I aim for &lt;=4 lines)</li>\n  <li>Do one thing well</li>\n  <li>Have a single level of abstraction</li>\n  <li>Minimise parameters (I aim for &lt;= 2 excluding cb)</li>\n  <li>Avoid booleans</li>\n  <li>Minimise conditional logic (guard conditions permitted)</li>  \n</ol>\n<p>\nand modules that:\n</p>\n<ol>\n  <li>Have meaningful names</li>\n  <li>Have a single responsibility</li>\n  <li>Encapsulate data and behaviour</li>\n</ol>\n<p>\nTo write coherent and cohesive code you have to understand and care about the principles of software craftsmanship. This is thousands of times more important than whether you use callbacks, promises or await. We seem to have forgotten, but lets try to remember before we damn ourselves to another level of asynchronous hell with await.\n</p>",
          "date": "2017-08-26T18:00:00.000Z",
          "images": {
            "id": "Await - I'll See You In Hell",
            "thumbnail": {
              "url": "//images.contentful.com/g99n9a78vx0s/Ayv9uj9UyWu6oOge8sYMo/0468e8bccf21a0062f02d2826ed1c43e/pinhead-720x540.jpg",
              "title": "Thubmnail of Pinhead",
              "description": "Pinhead from the Hellraiser franchise"
            }
          },
          "url": "/blog/await-ill-see-you-in-javascript-hell-1002"
        },
        {
          "id": 1001,
          "title": "When Orange Is Not The New Black",
          "author": {
            "id": "scresswell",
            "displayName": "Stephen Cresswell",
            "firstName": "Stephen",
            "lastName": "Cresswell",
            "jobTitle": "Moderator",
            "email": "email@stephen-cresswell.net",
            "mobile": "+44 (0)7814 033321"
          },
          "channel": {
            "id": "blog",
            "title": "Blog",
            "link": {
              "id": "Blog",
              "text": "Blog",
              "icon": "fa-file-text-o",
              "url": "/blog"
            },
            "introImage": {
              "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
              "title": "Duty Calls",
              "description": "A stick figure refusing to leave his computer and come to bed"
            },
            "introText": "\"Someone is wrong on the internet\"",
            "introLink": {
              "id": "Duty Calls",
              "text": "Duty Calls - xkcd",
              "url": "https://xkcd.com/386/"
            }
          },
          "tweetText": "When%20Orange%20Isn't%20The%20New%20Black",
          "keywords": [
            "Node.js",
            "Software",
            "JavaScript"
          ],
          "summary": "<p>\nFrameworks come and go so quickly that with some notable exceptions any libraries you depend on today, could be superseded tomorrow. There's a cost to adoption, but often a larger cost to migrate away. Jump on the band wagon too soon and you get the pain while a project is unstable, leave it too late and supporting community may already moving on.\n</p>\n<p>\nHow do you tell when orange really is the new black, rather than being the emperors new clothes?\n</p>",
          "body": "<img src=\"https://images.contentful.com/g99n9a78vx0s/8deT28SVQ4IqIcW8cI0i8/e6f3ef6fcf6f9bf92caa091ad13e0779/orange-is-the-new-black-1024x414.jpg\" title=\"Orange Is Not The New Black\" alt=\"Orange Is Not The New Black\" />\n<p>\nThe pace of software development is faster than ever before. Languages, libraries and applications emerge for their 15 minutes of fame, before being relegated to the C-List just as quickly. But at what cost?\n</p>\n<p>\nI remember when I first discovered open source. Adding a new library to a software project felt like adding value, with the added bonus that it was code I didn't have to write, test or maintain. But was there always a significant and worthwhile benefit?\n</p>\n<p>\nI remember a colleage complaining about the Spring framework, and that it was too much for him to learn. At a time when the most popular alternatives were <a href=\"https://struts.apache.org/\">Struts<a>, <a href=\"http://tapestry.apache.org/\">Tapestry</a>, <a href=\"http://www.oracle.com/technetwork/java/javaee/javaserverfaces-139869.html\">JSF</a> and his preferred option of vanilla <a href=\"https://docs.oracle.com/cd/E17904_01/web.1111/e13712/basics.htm\">Servlets and JSP</a> I didn't have much sympathy for him. Why should his reluctance to pick up new technology limit everyone elses productivity? Surely learning new tools is a key part of of the job?\n</p>\n<p>\nNow I often find myself facing a similar situation, but from the other site of the argument. I'm no ludite. I was an early adopter of docker, with a <a href=\"https://github.com/moby/moby/commit/fe727e2a87fa086d728664c396fd44f4be6d6afd\">commit</a> from 2013 to prove it. I have maintain several moderately popular Node.js packages, and spent the last year writing in Go. Despite frontend devleopment not being a core part of my job, I am comfortable enough with React to build websites like this one. So what's the problem?\n</p>\n<p>\nThe first problem is that frameworks come and go so quickly that with some noteable exceptions any libraries you depend on today, could be superseeded tomorrow. There's a cost to adoption, but often a larger cost to migrate away. Jump on the band wagon too soon and you get the pain while a project is unstable, leave it too late and supporting community may already moving on. \n</p>\n<p>\nThe second problem is that the new library or tool is either poorly designed or doesn't bring enough value to justitfy the cost, but that the developers introducing haven't been bitten enough times in the past to be wary.\n</p>\n<p>\nLet's consider three examples, <a href=\"https://www.npmjs.com/package/hapi\">hapi</a>, <a href=\"https://www.npmjs.com/package/yarn\">yarn</a> and <a href=\"https://www.npmjs.com/package/jest\">jests</a>. I have deliberately picked both these libraries because they are from large organisations, have a significant user base and received a lot of positive publicitly. Several teams I work with have moved, or are considering moving to them.\n</p>\n<p>\nMy preferred http server has always been <a href=\"https://www.npmjs.com/package/express\">express</a>, for the simple reason that it doesn't try to be in charge. Provided my handlers conform to a few trivial middleware conventions I'm good. A few years ago I was leading a team that wanted to move to <a href=\"https://www.npmjs.com/package/hapi\">hapi</a>. A pair of developers evaluated it, recommended it and so we started using it in all new services. It was a huge mistake. Hapi takes the opposite approach to express. It wants to be boss, exerting a strong influencing over how your code and tests are written. Discontent with hapi grew over the the next few months and the team switched back to express. Four years on there are still a handful of hapi services running that nobody wants to touch.\n</p>\n<p>\nWhen yarn was released it was well received. It was faster than npm and did a better job of locking transitive dependencies. With the release of npm 5 most of yarn's advantages have been negated. In order to support yarn, the organisation I work for had to make code changes to their build pipeline. At least some of those same teams are now considering moving back.\n</p>\n<p>\nThe new unit testing framework on the block is <a href=\"https://www.npmjs.com/package/jest\">Jest</a>. There are a whole series of blog posts from organisations who have successfully migrated from mocha to jest and report reaping the benefits. When I look at Jest I see everything I want to avoid in a unit test framework.\n</p>\n\n<ul>\n  <li>It wants to run your tests for you rather than making programmatic invocation a first class citizen, putting you at the mercy of its file globbing.</li>\n  <li>It uses a global \"expect\" function which doesn't differtiate whether it's being called from a previously executed test or the current one, resulting in difficult to diagnose failures.</li>\n  <li>It uses a fluid assertion api, leading to tests that are higher in ceromony, lower in essence.</li>\n  <li>Through its support for mocking it encourages testing interactions rather than side effects, which results in brittle and opaque test.</li>\n  <li>Through its support for snapshots it encourages brittle, whole document comparision tests</li>\n</ul>\n<p>\nThe irony of my last example is that I use jest for testing this site. Since it is configured by default with <a href=\"https://github.com/facebookincubator/create-react-app\">create-react-app</a>. While not reported in those same blog posts I had plenty of teething problems with Jest, from it.only still isn't working reliably and configuration has been neutered. Despite my reservations I've decided to stick with it. Given the support I'm sure these teething problems will get resolved and the react eco-system is sufficiently complex for me to want to stay on-piste as it were. I have a suspision that it's support for parallel testing will be worth the trouble, and if other teams are going to be adopting it, I might as well get on the band wagon.\n</p>\n<p>\nSo how do you tell when orange really is the new black, rather than being a case of the emperors new clothes? The answer is to be suspicious of any library that:\n</p>\n<ul>\n  <li>has a steep and/or prolonged learning curve</li>\n  <li>is accompanied by an unusual amount of hype</li>  \n  <li>significantly changes the design of your appliation</li>\n  <li>is accompanied by its own testing tools (a well designed library shouldn't need one)</li>\n  <li>wants to \"start\" your application</li>\n  <li>is primarily used for lily gilding</li>\n  <li>has poor documentation and who's issues go unanswered</li>  \n</ul>\n</p>\n<p>\nThat is unless the library in question written by me. In which case you should definitely use it without thinking twice.\n</p>\n",
          "date": "2017-08-19T18:00:00.000Z",
          "images": {
            "id": "Orange Is Not The New Black",
            "thumbnail": {
              "url": "//images.contentful.com/g99n9a78vx0s/4J3pfkFcTYQq8giGaCwSC8/7953f2c1dd967032cab1aa26b1c91bd3/orange-is-the-new-black-720x540.jpg",
              "title": "Thumbnail of Orange Is Not The New Black",
              "description": "Orange Is Not The New Black "
            }
          },
          "url": "/blog/when-orange-is-not-the-new-black-1001"
        },
        {
          "id": 1000,
          "title": "10½ Factor Microservices",
          "author": {
            "id": "scresswell",
            "displayName": "Stephen Cresswell",
            "firstName": "Stephen",
            "lastName": "Cresswell",
            "jobTitle": "Moderator",
            "email": "email@stephen-cresswell.net",
            "mobile": "+44 (0)7814 033321"
          },
          "channel": {
            "id": "blog",
            "title": "Blog",
            "link": {
              "id": "Blog",
              "text": "Blog",
              "icon": "fa-file-text-o",
              "url": "/blog"
            },
            "introImage": {
              "url": "//images.contentful.com/g99n9a78vx0s/6oYIvHjLUsU0UISMyaOqq4/5ab8c6d5dcdbbe1e6beb0f5a9992d54e/duty_calls.png",
              "title": "Duty Calls",
              "description": "A stick figure refusing to leave his computer and come to bed"
            },
            "introText": "\"Someone is wrong on the internet\"",
            "introLink": {
              "id": "Duty Calls",
              "text": "Duty Calls - xkcd",
              "url": "https://xkcd.com/386/"
            }
          },
          "tweetText": "10%C2%BD%20Factor%20Microservices",
          "keywords": [
            "Node.js",
            "Microservices",
            "12 Factor",
            "Docker"
          ],
          "summary": "<p>\nBy now you've probably heard of the <a href='https://12factor.net'>12 Factor</a> design principles. Overall they are very good. However as with any piece of advice they should be viewed in the context of when they were written, and reassessed in the current content to see to what extent they are still valuable. In the context of Node.js microservices how will the 12 factor principles stack up?\n</p>",
          "body": "<p>\nBy now you've probably heard of the <a href=\"https://12factor.net\">12 Factor</a> design principles. Overall they are very good, but as with any piece of advice they should be viewed in the context of when they were written, and reassessed in the current content to see to what extent they are still valuable.\n</p><p>\nThe context I'm most interested in is that of microservice development,  with Node.js. Node is a great fit for microservces in most situations. The module system is excellent, so it's easy to reuse and share code. Once mastered JavaScript can be terse, yet readable, it's interpreted so doesn't suffer from compilation delays, but thanks to V8 fast enough for the majority of applications. The only time I've found Node problematic is when performing event loop blocking operations or when interacting with a server who's client libraries are of dubious quality. With the scene set, how will the 12 factor principles stack up?\n</p>\n<h2>Codebase (1)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/2sohHw99zqsmuQWqkmCYcw/a7d4ac73cde04f7ce2b04c13b00b2bab/codebase-1024x768.jpg\" title=\"Codebase\" alt=\"A programmer typing on a keyboard\" />\n<p>\nThe first of the principles - \"Codebase\" is also the most easily challenged. The principle states that there should be a 1-1 relationship between codebase and source repository, with consideration for branches and forks etc. \n</p>\n<p>\nI sympathise entirely with what I suspect to be the underlying motivation. I've had to suffer a number of projects with complicated, multi-stage setup, linked repositories (e.g. git sub-modules), shared build scripts and all encompassing development environments which made life a misery. However the glaring problem with this principle is that it prohibits monorepos, where multiple applications are stored in a single repository. Monorepos aren't without their problems - without appropriate tooling it is difficult to know what to build, test and deploy, but have certain advantages such as making it easier to make sweeping changes to the entire codebase.\n</p>\n<h2>Dependencies (2)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/jGfmTiIZEW88GOIMCSU8u/675b86d953174e791fac4f35e85de04a/dependencies-1024x768.jpeg\" title=\"Dependencies\" alt=\"Stars from a baby's mobile\" />\n<p>\nThe second principle, \"Explicitly declare and isolate dependencies\", is more sound. Version and bundle all dependencies with the application, rather than trusting to their correct existence on deployment. Node.js solves this in a similar way to most other modern languages, by including a dependencies manifest. The latest version of Node's package manager automatically creates a lock file, so even transitive dependencies are explicitly versioned, however there are some situations in which even this is not enough.\n</p><p>\nSome node modules have native dependencies, which must be present in the target environment in order to work. Examples are <a href=\"https://github.com/gsmcwhirter/node-zoneinfo\">zoneinfo</a>, <a href=\"https://www.npmjs.com/package/pg-native\">pg-native</a> and <a href=\"https://www.npmjs.com/package/node-expat\">node-expat</a>. To truly conform to this principle, these dependencies should be bundled too, as must Node.js itself, and this is where <a href=\"https://www.docker.com/\">docker</a> comes in.\n</p><p>\nBy deploying your application within a docker container, and by including its dockerfile in your codebase you can not only version the non-native dependencies, but the native ones as well. \n</p><p>\n<h2>Backing Services (4) and Dev/Prod Parity (10)</h2>\n<div class=\"row\">\n<div class=\"col-md-6\">\n<img src=\"https://images.contentful.com/g99n9a78vx0s/5VN3f8hLB6gwgmauwmKKoa/11dfc597c2e980d9bf7375878429a96a/backing-services-1024x768.jpeg\" title=\"Backing Services\" alt=\"A server communicating with database and web service\"/>\n</div>\n<div class=\"col-md-6\">\n<img src=\"https://images.contentful.com/g99n9a78vx0s/3VDwtMdYykG8cki4C2OQ6u/25a707ce6c7e17a05c2b2a22653a4b2c/dev-prod-parity-1024x768.jpg\" title=\"Dev/Prod Parity\" alt=\"Two nearly identical robots\" />\n</div>\n</div>\nWhile we're on the subject of docker and containerisation, we may as well tick off the forth (backing services), and tenth (dev/prod parity) principles. The backing services principle states that external services (databases, message brokers, other web services, etc) should be treated as \"attached resources\", which can be substituded without having to rebuild and redeploy the application. \n</p><p>\nThis is achievable through external configuration, but made even easier by the service discovery provided by docker, and related technologies such as <a href=\"https://kubernetes.io\">Kubernetes</a>. Kubernetes even comes with a <a href=\"https://kubernetes.io/docs/admin/kube-proxy/\">proxy</a> which enables you to attach a locally running application to a kubernetes managed backing service transparently.\n</p>\n<p>\nBy deploying services within containers, you get a high degree of dev/prod parity, and even more if you deploy databases and message brokers within containers too. Despite this I tend to only do this locally and on CI for serious applications as I've encountered more than my share of issues with mounting network attached storage into docker containers, especially when managed by Kubernetes.\n</p>\n<h2>Config (3)</h2>\n<p>\nUnfortunately the 3rd principle of storing configuration (only) in the environment isn't as well thought out. The 12 factor principles argue that\n</p>\n<ol>\n  <li>against named environments because you will run out of meaningful names</li>\n  <li>for limiting configuration to environment variables, since files can be scattered, inconsistent and may accidentally be checked into source control</li>\n</ol>\n<p>\nMy counter to argument 1, is that in every organisation I've ever worked as, people always refer to environments by name, and so having a named environment configuration makes life significantly easier.\n</p><p>\nMy problem with argument 2, is that I specifically want to check config (excluding secrets) into source control. This enables it to be versioned and deployed with the application, for the same reasons behind the principle of dependency management. Furthermore environment variables lack native structure and typing and cannot be changed at runtime. They are also the <a href=\"https://www.theregister.co.uk/2017/08/02/typosquatting_npm/\">easiest configuration to steal</a>.\n</p><p>\nInstead my approach is to use whatever config source makes most sense (which can include environment variables). I <a href=\"https://github.com/cressie176/www-app/tree/master/server/config\">version control a default config file, and environmental overrides</a> with the application source, then further override with secrets at deploy or runtime using an appropriate secrets management tool such as <a href=\"https://github.com/StackExchange/blackbox\">blackbox</a>, <a href=\"https://www.vaultproject.io/\">vault</a> or <a href=\"https://kubernetes.io/docs/concepts/configuration/secret/\">Kubernetes</a>. I use <a href=\"https://www.npmjs.com/package/confabulous\">Confabulous</a>, a library of my own creation similar to <a href=\"https://www.npmjs.com/package/nconf\">nconf</a>, to handle the merging and overrides.\n</p>\n<h2>Build, Release, Run (5), Processes (6) and Port Binding (7)</h2>\n<p>\nThe next 3 principles aren't very interesting. Separating Build, Release, Run (principle 5) is trivial with docker...\n</p>\n<ul>\n<li>Build and image from a clean checkout</li>\n<li>Push to a repository</li>\n<li>Run on a remote server</li>\n</ul>\n<p>\nI prefer a self managed CI server such as <a href=\"https://jenkins.io/\">Jenkins</a> for building images and orchestrating deployments. With your own server you can preinstall build dependencies, cache images and have fewer security concerns. As a result, some of our microservices build, test and deploy in under 20 seconds.\n</p>\n<p>\nPrinciple 6, stateless processes just boils down to using a database rather than memory to persist any data which spans a request, and Principle 7, port binding means your application should start it's own server rather than be deployed into an application server. Popular in the Java world, but not in Nodeland.\n</p>\n<h2>Concurrency (8) and Admin Processes (12)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/493at3Zgc0smAquIsIA8uC/e240f820a8f659877b7acd75b3b39bcb/concurrency-1024x768.jpg\" title=\"Concurrency\" alt=\"A graph showing process instances by worker diversity\" />\n<p>\nPrinciple 8, concurrency is highly relevant in a Node.js and microservice environment. This principle advocates scaling by distributing functionality to worker processes, whos instances may grow and shrink depending on demand. i.e. microservices 101. I've also found this a useful approach for circumventing one of Node's limitations. If you have an node process which by necessity performs some long running synchronous operation (e.g. parsing a large XML file), then it will block all other tasks. By separating the synchronous and asynchronous behaviour into different services, you bypass the problem.\n</p><p>\nWe take the same approach for admin processes (principle 12). They either exist as a temporary service, launching from their own docker container and running to completion, or they lie dormant in another permanently running service and can be triggered either by http request or message.\n</p>\n\n<h2>Disposability (9)</h2>\n<img src=\"https:////images.contentful.com/g99n9a78vx0s/5UBtNZVk6kSGeQ0IWm6Cwc/e03218aed927f0b59df6a34c28c08e1c/disposability-1024x768.jpg\" title=\"Disposability\" alt=\"A waste paper basket\"/>\n<p>\nPrinciple 9, disposability is also interesting, and often under appreciated. The principle states that applications should startup and shutdown quickly and gracefully. By gracefully I mean that applications should not attempt to perform any work until all necessary resources (databases connections etc) have been established. When receiving a shutdown signal the application should stop accepting new work, but wait for inflight tasks to complete and only then close connections to attached resources. \n</p><p>\nDepending on your number of microservices, and variety of backing services, this can be surprisingly difficult to orchestrate in a consistent way. My esteemed comrade <a href=\"https://github.com/BorePlusPlus\">Dalibor Novak</a> worked with me creating <a href=\"https://www.npmjs.com/package/systemic\">systemic</a> for solving this problem. You can see it in action <a href=\"https://github.com/cressie176/www-app/tree/master/server/lib\">here</a>\n</p>\n<h2>Logs (11)</h2>\n<img src=\"https://images.contentful.com/g99n9a78vx0s/4KUiWSfUasommuGiO0E2mi/9b648e38d75e13f6e6055a27148e990d/logs-1024x768.jpeg\" title=\"Logs\" alt=\"Logs being transported down a river\"/>\n<p>\nThe remaining principle is to treat logs as event streams. The advice is to write logs, unbuffered to stdout, then route these to dedicated logging infrastructure. I agree, but think they missed a trick. Rather than writing directly to console or your logging framework of choice your application should also emit log messages as events. By doing so each message can have multiple consumers, which may include one which writes to the console, but could additionally include one which publishes events to a message bus or monitoring system such as <a href=\"https://prometheus.io/\">Prometheus</a>. As an added bonus it becomes trivial to selectively silence are asset logged events in automated tests. Node has excellent support for <a href=\"https://nodejs.org/api/events.html\">events</a>, but using it for logging would be rather unusual. For this reason (and others) I've wrapped the event emitter behind a loglike api in a library called <a href=\"https://www.npmjs.com/search?q=prepper\">prepper</a>. You can connect it to console, bunyan or any other logging framework to get the benefits given above while retaining your logger choice.\n\nThe remaining principle is to treat logs as event streams. The advice is to write logs, unbuffered to stdout, then route these to dedicated logging infrastructure. I agree, but think they missed a trick. Rather than writing directly to stdout or your logging framework of choice your application should emit log messages as internal events. By doing so each message can have multiple consumers, which may include one which writes to stdout, but could additionally include one which publishes events to a message bus or monitoring system such as <a href=\"https://prometheus.io/\">Prometheus</a>. As an added bonus it becomes trivial to selectively silence or assert logged events in automated tests. Node has excellent support for <a href=\"https://nodejs.org/api/events.html\">events</a>, but using it for logging would be rather unusual. For this reason (and others) I've wrapped the event emitter behind a loglike API in a library called <a href=\"https://www.npmjs.com/search?q=prepper\">prepper</a>. You can connect it to console, bunyan or any other logging framework to get the benefits given above while retaining your logger of choice.\n\n</p>\n<h2>In Conclusion...</h2>\n<p>\nOf all the 12 factor principles, the only one I fully disagree with is that of config (-1). The codebase principle is still valid in spirit, even if the concerns about the relationship between source code and repository has  dated (-½). Given the extent to which Node.js, Microservices and containerisation have revolutionised how we design, write and deploy code. 10½ out of 12 is pretty good.\n</p>\n\n\n\n\n\n\n\n\n",
          "date": "2017-08-12T20:00:00.000Z",
          "images": {
            "id": "10½ Factor Microservices With Node.js",
            "thumbnail": {
              "url": "//images.contentful.com/g99n9a78vx0s/3aMxdRlFxuggOWEqeIYm6i/53409a51c6e8a38616576e3cbae97b9f/ten-and-a-half-factor-720x540.jpg",
              "title": "Thumbnail of a 12 Sided  Dice",
              "description": "A 12 sided dice showing 10½"
            }
          },
          "url": "/blog/10-factor-microservices-1000"
        }
      ],
      "link": {
        "id": "See all articles…",
        "text": "See all articles…",
        "url": "/blog"
      }
    },
    "software": {
      "id": "software",
      "title": "Software",
      "icon": "fa-laptop",
      "items": [
        {
          "id": "yadda",
          "title": "Yadda",
          "summary": "A cucumber-esque BDD library, but with greater flexibility",
          "body": "A cucumber-esque BDD library, but with greater flexibility",
          "url": "https://www.github.com/acuminous/yadda"
        },
        {
          "id": "rascal",
          "title": "Rascal",
          "summary": "A friendly RabbitMQ client, with advanced error handling and mostly safe defaults",
          "body": "A friendly RabbitMQ client, with advanced error handling and mostly safe defaults",
          "url": "https://www.github.com/guidesmiths/rascal"
        },
        {
          "id": "marv",
          "title": "Marv",
          "summary": "A database migration library with pluggable drivers for PostgreSQL and MySQL",
          "body": "A database migration library with pluggable drivers for PostgreSQL and MySQL",
          "url": "https://www.github.com/guidesmiths/marv"
        },
        {
          "id": "confabulous",
          "title": "Confabulous",
          "summary": "A hierarchical configuration loader with support for remote sources such as S3, etcd and Vault",
          "body": "A hierarchical configuration loader with support for remote sources such as S3, etcd and Vault",
          "url": "https://www.github.com/guidesmiths/confabulous"
        },
        {
          "id": "systemic",
          "title": "Systemic",
          "summary": "A minimal dependency injection library",
          "body": "A minimal dependency injection library",
          "url": "https://www.github.com/guidesmiths/systemic"
        }
      ],
      "link": {
        "id": "See all software…",
        "text": "See all software…",
        "url": "/software"
      }
    }
  },
  "profile": {
    "id": "profile",
    "title": "Profile",
    "body": "<p>I am a creative and conscientious software engineer with over 20 years experience in a variety of sectors. While most productive designing and writing backend systems, I am accomplished at leading cross functional teams and have extensive DevOps experience, especially with regards to CI/CD pipelines and containerisation. I also have reasonable frontend skills which include React, as demonstrated by the <a href='https://www.github.com/cressie176/www-app'>source code</a> for this site.</p>\n\n<p>Until recently I was operating in a dual role, firstly as CTO and co-founder of <a href='https://www.guidesmiths.com'>GuideSmiths</a>, a successful Node.js & microservices consultancy, secondly as principal consultant, leading technical teams designing and implementing solutions for GuideSmith’s clients.<p>\n\n</p>Due to a desire to spend more time with my family, I have negotiated an exit from GuideSmiths, and accepted a senior, hands-on position with <a href=\"https://www.tes.com\">Tes Global Ltd</a>, which can be predominantly carried out from the vicinity of my home in Suffolk.</p>\n\n\n"
  },
  "people": {
    "scresswell": {
      "id": "scresswell",
      "displayName": "Stephen Cresswell",
      "firstName": "Stephen",
      "lastName": "Cresswell",
      "jobTitle": "Moderator",
      "email": "email@stephen-cresswell.net",
      "mobile": "+44 (0)7814 033321"
    }
  },
  "copyright": {
    "id": "© 2017 Stephen Cresswell. All rights reserved.",
    "year": 2017,
    "owner": "Stephen Cresswell",
    "rights": "All rights reserved."
  }
}